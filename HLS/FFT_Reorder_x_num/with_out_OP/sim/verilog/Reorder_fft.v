// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Reorder_fft,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.320000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=18,HLS_SYN_DSP=16,HLS_SYN_FF=2519,HLS_SYN_LUT=2991,HLS_VERSION=2018_3}" *)

module Reorder_fft (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        num_word,
        Real_r_address0,
        Real_r_ce0,
        Real_r_we0,
        Real_r_d0,
        Real_r_q0,
        Imag_address0,
        Imag_ce0,
        Imag_we0,
        Imag_d0,
        Imag_q0
);

parameter    ap_ST_fsm_state1 = 52'd1;
parameter    ap_ST_fsm_state2 = 52'd2;
parameter    ap_ST_fsm_state3 = 52'd4;
parameter    ap_ST_fsm_state4 = 52'd8;
parameter    ap_ST_fsm_state5 = 52'd16;
parameter    ap_ST_fsm_state6 = 52'd32;
parameter    ap_ST_fsm_state7 = 52'd64;
parameter    ap_ST_fsm_state8 = 52'd128;
parameter    ap_ST_fsm_state9 = 52'd256;
parameter    ap_ST_fsm_state10 = 52'd512;
parameter    ap_ST_fsm_state11 = 52'd1024;
parameter    ap_ST_fsm_state12 = 52'd2048;
parameter    ap_ST_fsm_state13 = 52'd4096;
parameter    ap_ST_fsm_state14 = 52'd8192;
parameter    ap_ST_fsm_state15 = 52'd16384;
parameter    ap_ST_fsm_state16 = 52'd32768;
parameter    ap_ST_fsm_state17 = 52'd65536;
parameter    ap_ST_fsm_state18 = 52'd131072;
parameter    ap_ST_fsm_state19 = 52'd262144;
parameter    ap_ST_fsm_state20 = 52'd524288;
parameter    ap_ST_fsm_state21 = 52'd1048576;
parameter    ap_ST_fsm_state22 = 52'd2097152;
parameter    ap_ST_fsm_state23 = 52'd4194304;
parameter    ap_ST_fsm_state24 = 52'd8388608;
parameter    ap_ST_fsm_state25 = 52'd16777216;
parameter    ap_ST_fsm_state26 = 52'd33554432;
parameter    ap_ST_fsm_state27 = 52'd67108864;
parameter    ap_ST_fsm_state28 = 52'd134217728;
parameter    ap_ST_fsm_state29 = 52'd268435456;
parameter    ap_ST_fsm_state30 = 52'd536870912;
parameter    ap_ST_fsm_state31 = 52'd1073741824;
parameter    ap_ST_fsm_state32 = 52'd2147483648;
parameter    ap_ST_fsm_state33 = 52'd4294967296;
parameter    ap_ST_fsm_state34 = 52'd8589934592;
parameter    ap_ST_fsm_state35 = 52'd17179869184;
parameter    ap_ST_fsm_state36 = 52'd34359738368;
parameter    ap_ST_fsm_state37 = 52'd68719476736;
parameter    ap_ST_fsm_state38 = 52'd137438953472;
parameter    ap_ST_fsm_state39 = 52'd274877906944;
parameter    ap_ST_fsm_state40 = 52'd549755813888;
parameter    ap_ST_fsm_state41 = 52'd1099511627776;
parameter    ap_ST_fsm_state42 = 52'd2199023255552;
parameter    ap_ST_fsm_state43 = 52'd4398046511104;
parameter    ap_ST_fsm_state44 = 52'd8796093022208;
parameter    ap_ST_fsm_state45 = 52'd17592186044416;
parameter    ap_ST_fsm_state46 = 52'd35184372088832;
parameter    ap_ST_fsm_state47 = 52'd70368744177664;
parameter    ap_ST_fsm_state48 = 52'd140737488355328;
parameter    ap_ST_fsm_state49 = 52'd281474976710656;
parameter    ap_ST_fsm_state50 = 52'd562949953421312;
parameter    ap_ST_fsm_state51 = 52'd1125899906842624;
parameter    ap_ST_fsm_state52 = 52'd2251799813685248;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] num_word;
output  [13:0] Real_r_address0;
output   Real_r_ce0;
output   Real_r_we0;
output  [31:0] Real_r_d0;
input  [31:0] Real_r_q0;
output  [13:0] Imag_address0;
output   Imag_ce0;
output   Imag_we0;
output  [31:0] Imag_d0;
input  [31:0] Imag_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] Real_r_address0;
reg Real_r_ce0;
reg Real_r_we0;
reg[31:0] Real_r_d0;
reg[13:0] Imag_address0;
reg Imag_ce0;
reg Imag_we0;
reg[31:0] Imag_d0;

(* fsm_encoding = "none" *) reg   [51:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] lut_reorder_I_1024_address0;
reg    lut_reorder_I_1024_ce0;
wire   [9:0] lut_reorder_I_1024_q0;
wire   [8:0] lut_reorder_J_1024_address0;
reg    lut_reorder_J_1024_ce0;
wire   [9:0] lut_reorder_J_1024_q0;
wire   [10:0] lut_reorder_I_4096_address0;
reg    lut_reorder_I_4096_ce0;
wire   [9:0] lut_reorder_I_4096_q0;
wire   [10:0] lut_reorder_J_4096_address0;
reg    lut_reorder_J_4096_ce0;
wire   [11:0] lut_reorder_J_4096_q0;
wire   [12:0] lut_reorder_I_16384_address0;
reg    lut_reorder_I_16384_ce0;
wire   [8:0] lut_reorder_I_16384_q0;
wire   [12:0] lut_reorder_J_16384_address0;
reg    lut_reorder_J_16384_ce0;
wire   [13:0] lut_reorder_J_16384_q0;
reg   [31:0] reg_364;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state49;
reg   [31:0] reg_370;
reg   [31:0] reg_375;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state50;
reg   [31:0] reg_381;
wire   [31:0] grp_fu_352_p2;
reg   [31:0] reg_386;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state28;
wire   [31:0] grp_fu_340_p2;
reg   [31:0] reg_392;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state44;
wire   [31:0] grp_fu_344_p2;
reg   [31:0] reg_399;
reg   [29:0] p_lshr_reg_821;
wire   [0:0] tmp_fu_422_p2;
reg   [0:0] tmp_reg_826;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_1_fu_427_p2;
reg   [0:0] tmp_1_reg_833;
wire   [0:0] tmp_7_fu_440_p2;
reg   [0:0] tmp_7_reg_838;
wire   [11:0] leng_reorder_2_fu_446_p3;
reg   [11:0] leng_reorder_2_reg_843;
wire   [31:0] tmp_29_fu_505_p3;
reg   [31:0] tmp_29_reg_848;
wire  signed [63:0] tmp_3_fu_524_p1;
reg  signed [63:0] tmp_3_reg_856;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_30_fu_513_p2;
reg   [13:0] Real_addr_2_reg_866;
reg   [13:0] Imag_addr_reg_871;
wire  signed [12:0] tmp_9_fu_540_p1;
reg  signed [12:0] tmp_9_reg_888;
wire   [0:0] sel_tmp2_fu_548_p2;
reg   [0:0] sel_tmp2_reg_893;
wire   [0:0] sel_tmp7_fu_558_p2;
reg   [0:0] sel_tmp7_reg_899;
wire   [63:0] tmp_4_fu_576_p1;
reg   [63:0] tmp_4_reg_905;
reg   [13:0] Real_addr_3_reg_915;
reg   [13:0] Imag_addr_1_reg_920;
reg   [31:0] RE_vec_128_c_0_reg_930;
wire    ap_CS_fsm_state6;
reg   [31:0] IM_vec_128_a_reg_935;
reg   [31:0] RE_vec_128_d_0_reg_945;
wire    ap_CS_fsm_state7;
reg   [31:0] IM_vec_128_b_reg_950;
reg   [31:0] IM_vec_128_c_0_reg_955;
wire    ap_CS_fsm_state8;
reg   [31:0] IM_vec_128_c_1_reg_960;
wire   [15:0] tmp_31_fu_587_p1;
reg   [15:0] tmp_31_reg_965;
wire    ap_CS_fsm_state9;
reg   [31:0] IM_vec_128_d_0_reg_970;
reg   [31:0] IM_vec_128_d_1_reg_975;
wire   [2:0] c_aux_1_fu_597_p2;
reg   [2:0] c_aux_1_reg_983;
wire    ap_CS_fsm_state10;
wire   [1:0] tmp_32_fu_607_p1;
reg   [1:0] tmp_32_reg_988;
wire   [0:0] exitcond_fu_591_p2;
wire   [31:0] tmp_10_fu_611_p6;
reg   [31:0] tmp_10_reg_994;
wire   [31:0] RE_vec_128_d_load_ph_fu_629_p3;
reg   [31:0] RE_vec_128_d_load_ph_reg_1002;
wire   [31:0] RE_vec_128_c_load_ph_fu_636_p3;
reg   [31:0] RE_vec_128_c_load_ph_reg_1007;
wire   [31:0] IM_vec_128_d_load_ph_fu_643_p3;
reg   [31:0] IM_vec_128_d_load_ph_reg_1012;
wire   [31:0] IM_vec_128_c_load_ph_fu_649_p3;
reg   [31:0] IM_vec_128_c_load_ph_reg_1017;
wire   [15:0] sum8_fu_655_p2;
reg   [15:0] sum8_reg_1022;
wire   [31:0] c_1_fu_660_p2;
wire   [31:0] grp_fu_348_p2;
reg   [31:0] tmp_s_reg_1032;
wire   [31:0] grp_fu_356_p2;
reg   [31:0] tmp_17_reg_1037;
wire   [31:0] grp_fu_360_p2;
reg   [31:0] tmp_18_reg_1042;
wire   [31:0] tmp_14_fu_666_p6;
reg   [31:0] tmp_14_reg_1047;
wire   [31:0] tmp_20_fu_679_p6;
reg   [31:0] tmp_20_reg_1052;
reg   [31:0] tmp_15_reg_1057;
wire   [12:0] i_1_fu_702_p2;
reg   [12:0] i_1_reg_1065;
wire    ap_CS_fsm_state46;
wire   [0:0] exitcond1_fu_697_p2;
reg   [13:0] Real_addr_5_reg_1100;
wire    ap_CS_fsm_state47;
reg   [13:0] Imag_addr_5_reg_1105;
reg   [13:0] Real_addr_6_reg_1110;
reg   [13:0] Imag_addr_6_reg_1115;
reg  signed [31:0] c_reg_306;
reg   [2:0] c_aux_reg_318;
wire    ap_CS_fsm_state45;
reg   [12:0] i_reg_329;
wire    ap_CS_fsm_state52;
wire   [63:0] tmp_5_fu_529_p1;
wire   [63:0] tmp_6_fu_581_p1;
wire  signed [63:0] sum8_cast_fu_692_p1;
wire   [63:0] tmp_23_fu_708_p1;
wire  signed [63:0] tmp_24_fu_790_p1;
wire  signed [63:0] tmp_25_fu_796_p1;
reg   [31:0] indexJ_fu_98;
wire  signed [31:0] indexJ_3_fu_783_p3;
reg   [31:0] indexI_fu_102;
wire  signed [31:0] indexI_3_fu_762_p3;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state51;
reg   [31:0] grp_fu_340_p0;
reg   [31:0] grp_fu_340_p1;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state37;
reg   [31:0] grp_fu_344_p0;
reg   [31:0] grp_fu_344_p1;
reg   [31:0] grp_fu_348_p0;
reg   [31:0] grp_fu_348_p1;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state24;
reg   [31:0] grp_fu_352_p0;
reg   [31:0] grp_fu_352_p1;
wire   [31:0] p_neg_fu_406_p2;
wire   [11:0] p_cast_fu_432_p3;
wire   [31:0] num_word_op_op_fu_461_p2;
wire   [0:0] tmp_11_fu_466_p3;
wire   [29:0] p_neg_t_fu_474_p2;
wire   [29:0] tmp_26_fu_479_p4;
wire   [0:0] tmp_2_fu_454_p3;
wire   [29:0] tmp_27_fu_489_p3;
wire   [29:0] tmp_28_fu_497_p3;
wire   [31:0] ind1_fu_518_p2;
wire   [0:0] sel_tmp1_fu_543_p2;
wire   [0:0] tmp_8_fu_535_p2;
wire   [0:0] sel_tmp6_fu_553_p2;
wire   [31:0] ind2_fu_564_p2;
wire   [31:0] ind3_fu_570_p2;
wire   [1:0] tmp_10_fu_611_p5;
wire   [0:0] tmp_33_fu_625_p1;
wire   [15:0] tmp_cast_fu_603_p1;
wire   [31:0] indexI_1_cast_fu_724_p1;
wire   [31:0] indexI_2_cast_fu_732_p1;
wire   [31:0] indexI_5_fu_748_p3;
wire   [31:0] indexI_4_cast_fu_740_p1;
wire   [31:0] indexI_6_fu_755_p3;
wire   [31:0] indexJ_1_cast_fu_728_p1;
wire   [31:0] indexJ_2_cast_fu_736_p1;
wire   [31:0] indexJ_5_fu_769_p3;
wire   [31:0] indexJ_4_cast_fu_744_p1;
wire   [31:0] indexJ_6_fu_776_p3;
reg   [51:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 52'd1;
end

Reorder_fft_lut_rbkb #(
    .DataWidth( 10 ),
    .AddressRange( 480 ),
    .AddressWidth( 9 ))
lut_reorder_I_1024_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut_reorder_I_1024_address0),
    .ce0(lut_reorder_I_1024_ce0),
    .q0(lut_reorder_I_1024_q0)
);

Reorder_fft_lut_rcud #(
    .DataWidth( 10 ),
    .AddressRange( 480 ),
    .AddressWidth( 9 ))
lut_reorder_J_1024_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut_reorder_J_1024_address0),
    .ce0(lut_reorder_J_1024_ce0),
    .q0(lut_reorder_J_1024_q0)
);

Reorder_fft_lut_rdEe #(
    .DataWidth( 10 ),
    .AddressRange( 2016 ),
    .AddressWidth( 11 ))
lut_reorder_I_4096_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut_reorder_I_4096_address0),
    .ce0(lut_reorder_I_4096_ce0),
    .q0(lut_reorder_I_4096_q0)
);

Reorder_fft_lut_reOg #(
    .DataWidth( 12 ),
    .AddressRange( 2016 ),
    .AddressWidth( 11 ))
lut_reorder_J_4096_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut_reorder_J_4096_address0),
    .ce0(lut_reorder_J_4096_ce0),
    .q0(lut_reorder_J_4096_q0)
);

Reorder_fft_lut_rfYi #(
    .DataWidth( 9 ),
    .AddressRange( 8064 ),
    .AddressWidth( 13 ))
lut_reorder_I_16384_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut_reorder_I_16384_address0),
    .ce0(lut_reorder_I_16384_ce0),
    .q0(lut_reorder_I_16384_q0)
);

Reorder_fft_lut_rg8j #(
    .DataWidth( 14 ),
    .AddressRange( 8064 ),
    .AddressWidth( 13 ))
lut_reorder_J_16384_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut_reorder_J_16384_address0),
    .ce0(lut_reorder_J_16384_ce0),
    .q0(lut_reorder_J_16384_q0)
);

Reorder_fft_fadd_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Reorder_fft_fadd_hbi_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_340_p0),
    .din1(grp_fu_340_p1),
    .ce(1'b1),
    .dout(grp_fu_340_p2)
);

Reorder_fft_fadd_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Reorder_fft_fadd_hbi_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_344_p0),
    .din1(grp_fu_344_p1),
    .ce(1'b1),
    .dout(grp_fu_344_p2)
);

Reorder_fft_fmul_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Reorder_fft_fmul_ibs_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_348_p0),
    .din1(grp_fu_348_p1),
    .ce(1'b1),
    .dout(grp_fu_348_p2)
);

Reorder_fft_fmul_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Reorder_fft_fmul_ibs_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_352_p0),
    .din1(grp_fu_352_p1),
    .ce(1'b1),
    .dout(grp_fu_352_p2)
);

Reorder_fft_fmul_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Reorder_fft_fmul_ibs_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(IM_vec_128_b_reg_950),
    .din1(tmp_10_reg_994),
    .ce(1'b1),
    .dout(grp_fu_356_p2)
);

Reorder_fft_fmul_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Reorder_fft_fmul_ibs_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_10_reg_994),
    .din1(IM_vec_128_d_load_ph_reg_1012),
    .ce(1'b1),
    .dout(grp_fu_360_p2)
);

Reorder_fft_mux_4jbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
Reorder_fft_mux_4jbC_U7(
    .din0(32'd1065353216),
    .din1(32'd3212836864),
    .din2(32'd1065353216),
    .din3(32'd3212836864),
    .din4(tmp_10_fu_611_p5),
    .dout(tmp_10_fu_611_p6)
);

Reorder_fft_mux_4jbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
Reorder_fft_mux_4jbC_U8(
    .din0(32'd1065353216),
    .din1(32'd1065353216),
    .din2(32'd3212836864),
    .din3(32'd3212836864),
    .din4(tmp_32_reg_988),
    .dout(tmp_14_fu_666_p6)
);

Reorder_fft_mux_4jbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
Reorder_fft_mux_4jbC_U9(
    .din0(32'd1065353216),
    .din1(32'd3212836864),
    .din2(32'd3212836864),
    .din3(32'd1065353216),
    .din4(tmp_32_reg_988),
    .dout(tmp_20_fu_679_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        c_aux_reg_318 <= c_aux_1_reg_983;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        c_aux_reg_318 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_591_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        c_reg_306 <= c_1_fu_660_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        c_reg_306 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_30_fu_513_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_329 <= 13'd0;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        i_reg_329 <= i_1_reg_1065;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        IM_vec_128_a_reg_935 <= Imag_q0;
        RE_vec_128_c_0_reg_930 <= Real_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        IM_vec_128_b_reg_950 <= Imag_q0;
        RE_vec_128_d_0_reg_945 <= Real_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        IM_vec_128_c_0_reg_955 <= Imag_q0;
        IM_vec_128_c_1_reg_960 <= Real_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_591_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        IM_vec_128_c_load_ph_reg_1017 <= IM_vec_128_c_load_ph_fu_649_p3;
        IM_vec_128_d_load_ph_reg_1012 <= IM_vec_128_d_load_ph_fu_643_p3;
        RE_vec_128_c_load_ph_reg_1007 <= RE_vec_128_c_load_ph_fu_636_p3;
        RE_vec_128_d_load_ph_reg_1002 <= RE_vec_128_d_load_ph_fu_629_p3;
        sum8_reg_1022 <= sum8_fu_655_p2;
        tmp_10_reg_994 <= tmp_10_fu_611_p6;
        tmp_32_reg_988 <= tmp_32_fu_607_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        IM_vec_128_d_0_reg_970 <= Imag_q0;
        IM_vec_128_d_1_reg_975 <= Real_r_q0;
        tmp_31_reg_965 <= tmp_31_fu_587_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Imag_addr_1_reg_920[13 : 2] <= tmp_6_fu_581_p1[13 : 2];
        Real_addr_3_reg_915[13 : 2] <= tmp_6_fu_581_p1[13 : 2];
        tmp_4_reg_905[0] <= tmp_4_fu_576_p1[0];
tmp_4_reg_905[31 : 2] <= tmp_4_fu_576_p1[31 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        Imag_addr_5_reg_1105 <= tmp_24_fu_790_p1;
        Imag_addr_6_reg_1115 <= tmp_25_fu_796_p1;
        Real_addr_5_reg_1100 <= tmp_24_fu_790_p1;
        Real_addr_6_reg_1110 <= tmp_25_fu_796_p1;
        indexI_fu_102 <= indexI_3_fu_762_p3;
        indexJ_fu_98 <= indexJ_3_fu_783_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_30_fu_513_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        Imag_addr_reg_871[13 : 1] <= tmp_5_fu_529_p1[13 : 1];
        Real_addr_2_reg_866[13 : 1] <= tmp_5_fu_529_p1[13 : 1];
        tmp_3_reg_856 <= tmp_3_fu_524_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        c_aux_1_reg_983 <= c_aux_1_fu_597_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        i_1_reg_1065 <= i_1_fu_702_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        leng_reorder_2_reg_843[6 : 5] <= leng_reorder_2_fu_446_p3[6 : 5];
leng_reorder_2_reg_843[11 : 9] <= leng_reorder_2_fu_446_p3[11 : 9];
        tmp_1_reg_833 <= tmp_1_fu_427_p2;
        tmp_29_reg_848[31 : 2] <= tmp_29_fu_505_p3[31 : 2];
        tmp_7_reg_838 <= tmp_7_fu_440_p2;
        tmp_reg_826 <= tmp_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_lshr_reg_821 <= {{p_neg_fu_406_p2[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_364 <= Real_r_q0;
        reg_370 <= Imag_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_375 <= Real_r_q0;
        reg_381 <= Imag_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state15))) begin
        reg_386 <= grp_fu_352_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state23))) begin
        reg_392 <= grp_fu_340_p2;
        reg_399 <= grp_fu_344_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_30_fu_513_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        sel_tmp2_reg_893 <= sel_tmp2_fu_548_p2;
        sel_tmp7_reg_899 <= sel_tmp7_fu_558_p2;
        tmp_9_reg_888[6 : 5] <= tmp_9_fu_540_p1[6 : 5];
tmp_9_reg_888[12 : 9] <= tmp_9_fu_540_p1[12 : 9];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_14_reg_1047 <= tmp_14_fu_666_p6;
        tmp_20_reg_1052 <= tmp_20_fu_679_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_15_reg_1057 <= grp_fu_348_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_17_reg_1037 <= grp_fu_356_p2;
        tmp_18_reg_1042 <= grp_fu_360_p2;
        tmp_s_reg_1032 <= grp_fu_348_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state49))) begin
        Imag_address0 = Imag_addr_6_reg_1115;
    end else if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state48))) begin
        Imag_address0 = Imag_addr_5_reg_1105;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        Imag_address0 = sum8_cast_fu_692_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        Imag_address0 = Imag_addr_1_reg_920;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        Imag_address0 = Imag_addr_reg_871;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        Imag_address0 = tmp_4_reg_905;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        Imag_address0 = tmp_3_reg_856;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Imag_address0 = tmp_6_fu_581_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        Imag_address0 = tmp_5_fu_529_p1;
    end else begin
        Imag_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state4))) begin
        Imag_ce0 = 1'b1;
    end else begin
        Imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        Imag_d0 = reg_370;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        Imag_d0 = reg_381;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        Imag_d0 = reg_399;
    end else begin
        Imag_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state45))) begin
        Imag_we0 = 1'b1;
    end else begin
        Imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state49))) begin
        Real_r_address0 = Real_addr_6_reg_1110;
    end else if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state48))) begin
        Real_r_address0 = Real_addr_5_reg_1100;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        Real_r_address0 = sum8_cast_fu_692_p1;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        Real_r_address0 = Real_addr_3_reg_915;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        Real_r_address0 = Real_addr_2_reg_866;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Real_r_address0 = tmp_4_fu_576_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        Real_r_address0 = tmp_3_fu_524_p1;
    end else begin
        Real_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state4))) begin
        Real_r_ce0 = 1'b1;
    end else begin
        Real_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        Real_r_d0 = reg_364;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        Real_r_d0 = reg_375;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        Real_r_d0 = reg_392;
    end else begin
        Real_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state45))) begin
        Real_r_we0 = 1'b1;
    end else begin
        Real_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_697_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state46))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_697_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state46))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_340_p0 = reg_392;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_340_p0 = tmp_s_reg_1032;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_340_p0 = reg_386;
    end else begin
        grp_fu_340_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_340_p1 = reg_364;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_340_p1 = tmp_15_reg_1057;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_340_p1 = RE_vec_128_c_load_ph_reg_1007;
    end else begin
        grp_fu_340_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_344_p0 = reg_399;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_344_p0 = tmp_17_reg_1037;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_344_p0 = tmp_18_reg_1042;
    end else begin
        grp_fu_344_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_344_p1 = IM_vec_128_a_reg_935;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_344_p1 = reg_386;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_344_p1 = IM_vec_128_c_load_ph_reg_1017;
    end else begin
        grp_fu_344_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_348_p0 = tmp_14_reg_1047;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_348_p0 = reg_375;
    end else begin
        grp_fu_348_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_348_p1 = reg_392;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_348_p1 = tmp_10_reg_994;
    end else begin
        grp_fu_348_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_352_p0 = tmp_20_reg_1052;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_352_p0 = tmp_10_reg_994;
    end else begin
        grp_fu_352_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_352_p1 = reg_399;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_352_p1 = RE_vec_128_d_load_ph_reg_1002;
    end else begin
        grp_fu_352_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        lut_reorder_I_1024_ce0 = 1'b1;
    end else begin
        lut_reorder_I_1024_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        lut_reorder_I_16384_ce0 = 1'b1;
    end else begin
        lut_reorder_I_16384_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        lut_reorder_I_4096_ce0 = 1'b1;
    end else begin
        lut_reorder_I_4096_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        lut_reorder_J_1024_ce0 = 1'b1;
    end else begin
        lut_reorder_J_1024_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        lut_reorder_J_16384_ce0 = 1'b1;
    end else begin
        lut_reorder_J_16384_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        lut_reorder_J_4096_ce0 = 1'b1;
    end else begin
        lut_reorder_J_4096_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_30_fu_513_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((exitcond_fu_591_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state46 : begin
            if (((exitcond1_fu_697_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign IM_vec_128_c_load_ph_fu_649_p3 = ((tmp_33_fu_625_p1[0:0] === 1'b1) ? IM_vec_128_c_1_reg_960 : IM_vec_128_c_0_reg_955);

assign IM_vec_128_d_load_ph_fu_643_p3 = ((tmp_33_fu_625_p1[0:0] === 1'b1) ? IM_vec_128_d_1_reg_975 : IM_vec_128_d_0_reg_970);

assign RE_vec_128_c_load_ph_fu_636_p3 = ((tmp_33_fu_625_p1[0:0] === 1'b1) ? reg_370 : RE_vec_128_c_0_reg_930);

assign RE_vec_128_d_load_ph_fu_629_p3 = ((tmp_33_fu_625_p1[0:0] === 1'b1) ? reg_381 : RE_vec_128_d_0_reg_945);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c_1_fu_660_p2 = ($signed(c_reg_306) + $signed(32'd4));

assign c_aux_1_fu_597_p2 = (c_aux_reg_318 + 3'd1);

assign exitcond1_fu_697_p2 = ((i_reg_329 == tmp_9_reg_888) ? 1'b1 : 1'b0);

assign exitcond_fu_591_p2 = ((c_aux_reg_318 == 3'd4) ? 1'b1 : 1'b0);

assign i_1_fu_702_p2 = (i_reg_329 + 13'd1);

assign ind1_fu_518_p2 = (c_reg_306 | 32'd1);

assign ind2_fu_564_p2 = (c_reg_306 | 32'd2);

assign ind3_fu_570_p2 = (c_reg_306 | 32'd3);

assign indexI_1_cast_fu_724_p1 = lut_reorder_I_1024_q0;

assign indexI_2_cast_fu_732_p1 = lut_reorder_I_4096_q0;

assign indexI_3_fu_762_p3 = ((sel_tmp7_reg_899[0:0] === 1'b1) ? indexI_4_cast_fu_740_p1 : indexI_6_fu_755_p3);

assign indexI_4_cast_fu_740_p1 = lut_reorder_I_16384_q0;

assign indexI_5_fu_748_p3 = ((tmp_reg_826[0:0] === 1'b1) ? indexI_1_cast_fu_724_p1 : indexI_fu_102);

assign indexI_6_fu_755_p3 = ((sel_tmp2_reg_893[0:0] === 1'b1) ? indexI_2_cast_fu_732_p1 : indexI_5_fu_748_p3);

assign indexJ_1_cast_fu_728_p1 = lut_reorder_J_1024_q0;

assign indexJ_2_cast_fu_736_p1 = lut_reorder_J_4096_q0;

assign indexJ_3_fu_783_p3 = ((sel_tmp7_reg_899[0:0] === 1'b1) ? indexJ_4_cast_fu_744_p1 : indexJ_6_fu_776_p3);

assign indexJ_4_cast_fu_744_p1 = lut_reorder_J_16384_q0;

assign indexJ_5_fu_769_p3 = ((tmp_reg_826[0:0] === 1'b1) ? indexJ_1_cast_fu_728_p1 : indexJ_fu_98);

assign indexJ_6_fu_776_p3 = ((sel_tmp2_reg_893[0:0] === 1'b1) ? indexJ_2_cast_fu_736_p1 : indexJ_5_fu_769_p3);

assign leng_reorder_2_fu_446_p3 = ((tmp_7_fu_440_p2[0:0] === 1'b1) ? p_cast_fu_432_p3 : 12'd3968);

assign lut_reorder_I_1024_address0 = tmp_23_fu_708_p1;

assign lut_reorder_I_16384_address0 = tmp_23_fu_708_p1;

assign lut_reorder_I_4096_address0 = tmp_23_fu_708_p1;

assign lut_reorder_J_1024_address0 = tmp_23_fu_708_p1;

assign lut_reorder_J_16384_address0 = tmp_23_fu_708_p1;

assign lut_reorder_J_4096_address0 = tmp_23_fu_708_p1;

assign num_word_op_op_fu_461_p2 = (num_word + 32'd3);

assign p_cast_fu_432_p3 = ((tmp_fu_422_p2[0:0] === 1'b1) ? 12'd480 : 12'd2016);

assign p_neg_fu_406_p2 = ($signed(32'd4294967293) - $signed(num_word));

assign p_neg_t_fu_474_p2 = (30'd0 - p_lshr_reg_821);

assign sel_tmp1_fu_543_p2 = (tmp_reg_826 ^ 1'd1);

assign sel_tmp2_fu_548_p2 = (tmp_1_reg_833 & sel_tmp1_fu_543_p2);

assign sel_tmp6_fu_553_p2 = (tmp_7_reg_838 ^ 1'd1);

assign sel_tmp7_fu_558_p2 = (tmp_8_fu_535_p2 & sel_tmp6_fu_553_p2);

assign sum8_cast_fu_692_p1 = $signed(sum8_reg_1022);

assign sum8_fu_655_p2 = (tmp_31_reg_965 + tmp_cast_fu_603_p1);

assign tmp_10_fu_611_p5 = c_aux_reg_318[1:0];

assign tmp_11_fu_466_p3 = num_word_op_op_fu_461_p2[32'd31];

assign tmp_1_fu_427_p2 = ((num_word == 32'd4096) ? 1'b1 : 1'b0);

assign tmp_23_fu_708_p1 = i_reg_329;

assign tmp_24_fu_790_p1 = indexI_3_fu_762_p3;

assign tmp_25_fu_796_p1 = indexJ_3_fu_783_p3;

assign tmp_26_fu_479_p4 = {{num_word_op_op_fu_461_p2[31:2]}};

assign tmp_27_fu_489_p3 = ((tmp_11_fu_466_p3[0:0] === 1'b1) ? p_neg_t_fu_474_p2 : tmp_26_fu_479_p4);

assign tmp_28_fu_497_p3 = ((tmp_2_fu_454_p3[0:0] === 1'b1) ? 30'd0 : tmp_27_fu_489_p3);

assign tmp_29_fu_505_p3 = {{tmp_28_fu_497_p3}, {2'd0}};

assign tmp_2_fu_454_p3 = num_word[32'd31];

assign tmp_30_fu_513_p2 = ((c_reg_306 == tmp_29_reg_848) ? 1'b1 : 1'b0);

assign tmp_31_fu_587_p1 = c_reg_306[15:0];

assign tmp_32_fu_607_p1 = c_aux_reg_318[1:0];

assign tmp_33_fu_625_p1 = c_aux_reg_318[0:0];

assign tmp_3_fu_524_p1 = c_reg_306;

assign tmp_4_fu_576_p1 = ind2_fu_564_p2;

assign tmp_5_fu_529_p1 = ind1_fu_518_p2;

assign tmp_6_fu_581_p1 = ind3_fu_570_p2;

assign tmp_7_fu_440_p2 = (tmp_fu_422_p2 | tmp_1_fu_427_p2);

assign tmp_8_fu_535_p2 = ((num_word == 32'd16384) ? 1'b1 : 1'b0);

assign tmp_9_fu_540_p1 = $signed(leng_reorder_2_reg_843);

assign tmp_cast_fu_603_p1 = c_aux_reg_318;

assign tmp_fu_422_p2 = ((num_word == 32'd1024) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    leng_reorder_2_reg_843[4:0] <= 5'b00000;
    leng_reorder_2_reg_843[8:7] <= 2'b11;
    tmp_29_reg_848[1:0] <= 2'b00;
    Real_addr_2_reg_866[0] <= 1'b1;
    Imag_addr_reg_871[0] <= 1'b1;
    tmp_9_reg_888[4:0] <= 5'b00000;
    tmp_9_reg_888[8:7] <= 2'b11;
    tmp_4_reg_905[1] <= 1'b1;
    tmp_4_reg_905[63:32] <= 32'b00000000000000000000000000000000;
    Real_addr_3_reg_915[1:0] <= 2'b11;
    Imag_addr_1_reg_920[1:0] <= 2'b11;
end

endmodule //Reorder_fft
