-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Reorder_fft is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    num_word : IN STD_LOGIC_VECTOR (31 downto 0);
    Real_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Real_r_ce0 : OUT STD_LOGIC;
    Real_r_we0 : OUT STD_LOGIC;
    Real_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Real_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Imag_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Imag_ce0 : OUT STD_LOGIC;
    Imag_we0 : OUT STD_LOGIC;
    Imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Reorder_fft is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Reorder_fft,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.320000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=18,HLS_SYN_DSP=16,HLS_SYN_FF=2519,HLS_SYN_LUT=2991,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (51 downto 0) := "0000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (51 downto 0) := "0000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (51 downto 0) := "0000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (51 downto 0) := "0000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (51 downto 0) := "0000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (51 downto 0) := "0000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (51 downto 0) := "0001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (51 downto 0) := "0010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (51 downto 0) := "0100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (51 downto 0) := "1000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_FFFFFFFD : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_const_lv32_1000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_const_lv12_1E0 : STD_LOGIC_VECTOR (11 downto 0) := "000111100000";
    constant ap_const_lv12_7E0 : STD_LOGIC_VECTOR (11 downto 0) := "011111100000";
    constant ap_const_lv12_F80 : STD_LOGIC_VECTOR (11 downto 0) := "111110000000";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_4000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal lut_reorder_I_1024_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal lut_reorder_I_1024_ce0 : STD_LOGIC;
    signal lut_reorder_I_1024_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal lut_reorder_J_1024_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal lut_reorder_J_1024_ce0 : STD_LOGIC;
    signal lut_reorder_J_1024_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal lut_reorder_I_4096_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal lut_reorder_I_4096_ce0 : STD_LOGIC;
    signal lut_reorder_I_4096_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal lut_reorder_J_4096_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal lut_reorder_J_4096_ce0 : STD_LOGIC;
    signal lut_reorder_J_4096_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal lut_reorder_I_16384_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal lut_reorder_I_16384_ce0 : STD_LOGIC;
    signal lut_reorder_I_16384_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal lut_reorder_J_16384_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal lut_reorder_J_16384_ce0 : STD_LOGIC;
    signal lut_reorder_J_16384_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal reg_370 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_375 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal reg_381 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_352_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_386 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_340_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_392 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal grp_fu_344_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_399 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_reg_821 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_826 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_833 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_838 : STD_LOGIC_VECTOR (0 downto 0);
    signal leng_reorder_2_fu_446_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal leng_reorder_2_reg_843 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_29_fu_505_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_reg_848 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_856 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_30_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Real_addr_2_reg_866 : STD_LOGIC_VECTOR (13 downto 0);
    signal Imag_addr_reg_871 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_9_fu_540_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_9_reg_888 : STD_LOGIC_VECTOR (12 downto 0);
    signal sel_tmp2_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_reg_893 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_reg_899 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_576_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_905 : STD_LOGIC_VECTOR (63 downto 0);
    signal Real_addr_3_reg_915 : STD_LOGIC_VECTOR (13 downto 0);
    signal Imag_addr_1_reg_920 : STD_LOGIC_VECTOR (13 downto 0);
    signal RE_vec_128_c_0_reg_930 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal IM_vec_128_a_reg_935 : STD_LOGIC_VECTOR (31 downto 0);
    signal RE_vec_128_d_0_reg_945 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal IM_vec_128_b_reg_950 : STD_LOGIC_VECTOR (31 downto 0);
    signal IM_vec_128_c_0_reg_955 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal IM_vec_128_c_1_reg_960 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_587_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_31_reg_965 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal IM_vec_128_d_0_reg_970 : STD_LOGIC_VECTOR (31 downto 0);
    signal IM_vec_128_d_1_reg_975 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_aux_1_fu_597_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_aux_1_reg_983 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_32_fu_607_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_32_reg_988 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_611_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_994 : STD_LOGIC_VECTOR (31 downto 0);
    signal RE_vec_128_d_load_ph_fu_629_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal RE_vec_128_d_load_ph_reg_1002 : STD_LOGIC_VECTOR (31 downto 0);
    signal RE_vec_128_c_load_ph_fu_636_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal RE_vec_128_c_load_ph_reg_1007 : STD_LOGIC_VECTOR (31 downto 0);
    signal IM_vec_128_d_load_ph_fu_643_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal IM_vec_128_d_load_ph_reg_1012 : STD_LOGIC_VECTOR (31 downto 0);
    signal IM_vec_128_c_load_ph_fu_649_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal IM_vec_128_c_load_ph_reg_1017 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum8_fu_655_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum8_reg_1022 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_1_fu_660_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_348_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1032 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_356_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_reg_1037 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_360_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_1042 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_666_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_1047 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_679_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_reg_1052 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_1057 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_702_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_reg_1065 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal exitcond1_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Real_addr_5_reg_1100 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal Imag_addr_5_reg_1105 : STD_LOGIC_VECTOR (13 downto 0);
    signal Real_addr_6_reg_1110 : STD_LOGIC_VECTOR (13 downto 0);
    signal Imag_addr_6_reg_1115 : STD_LOGIC_VECTOR (13 downto 0);
    signal c_reg_306 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_aux_reg_318 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal i_reg_329 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal tmp_5_fu_529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_581_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum8_cast_fu_692_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_790_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_796_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indexJ_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal indexJ_3_fu_783_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indexI_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal indexI_3_fu_762_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal grp_fu_340_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_340_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal grp_fu_344_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_344_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_348_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_348_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_352_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_fu_406_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast_fu_432_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal num_word_op_op_fu_461_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_466_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_474_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_26_fu_479_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_2_fu_454_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_489_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_28_fu_497_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal ind1_fu_518_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp1_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ind2_fu_564_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ind3_fu_570_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_611_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_33_fu_625_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_cast_fu_603_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal indexI_1_cast_fu_724_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal indexI_2_cast_fu_732_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal indexI_5_fu_748_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indexI_4_cast_fu_740_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal indexI_6_fu_755_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indexJ_1_cast_fu_728_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal indexJ_2_cast_fu_736_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal indexJ_5_fu_769_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indexJ_4_cast_fu_744_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal indexJ_6_fu_776_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (51 downto 0);

    component Reorder_fft_fadd_hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Reorder_fft_fmul_ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Reorder_fft_mux_4jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Reorder_fft_lut_rbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component Reorder_fft_lut_rcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component Reorder_fft_lut_rdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component Reorder_fft_lut_reOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component Reorder_fft_lut_rfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component Reorder_fft_lut_rg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    lut_reorder_I_1024_U : component Reorder_fft_lut_rbkb
    generic map (
        DataWidth => 10,
        AddressRange => 480,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lut_reorder_I_1024_address0,
        ce0 => lut_reorder_I_1024_ce0,
        q0 => lut_reorder_I_1024_q0);

    lut_reorder_J_1024_U : component Reorder_fft_lut_rcud
    generic map (
        DataWidth => 10,
        AddressRange => 480,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lut_reorder_J_1024_address0,
        ce0 => lut_reorder_J_1024_ce0,
        q0 => lut_reorder_J_1024_q0);

    lut_reorder_I_4096_U : component Reorder_fft_lut_rdEe
    generic map (
        DataWidth => 10,
        AddressRange => 2016,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lut_reorder_I_4096_address0,
        ce0 => lut_reorder_I_4096_ce0,
        q0 => lut_reorder_I_4096_q0);

    lut_reorder_J_4096_U : component Reorder_fft_lut_reOg
    generic map (
        DataWidth => 12,
        AddressRange => 2016,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lut_reorder_J_4096_address0,
        ce0 => lut_reorder_J_4096_ce0,
        q0 => lut_reorder_J_4096_q0);

    lut_reorder_I_16384_U : component Reorder_fft_lut_rfYi
    generic map (
        DataWidth => 9,
        AddressRange => 8064,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lut_reorder_I_16384_address0,
        ce0 => lut_reorder_I_16384_ce0,
        q0 => lut_reorder_I_16384_q0);

    lut_reorder_J_16384_U : component Reorder_fft_lut_rg8j
    generic map (
        DataWidth => 14,
        AddressRange => 8064,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lut_reorder_J_16384_address0,
        ce0 => lut_reorder_J_16384_ce0,
        q0 => lut_reorder_J_16384_q0);

    Reorder_fft_fadd_hbi_U1 : component Reorder_fft_fadd_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_340_p0,
        din1 => grp_fu_340_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_340_p2);

    Reorder_fft_fadd_hbi_U2 : component Reorder_fft_fadd_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_344_p0,
        din1 => grp_fu_344_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_344_p2);

    Reorder_fft_fmul_ibs_U3 : component Reorder_fft_fmul_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_348_p0,
        din1 => grp_fu_348_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_348_p2);

    Reorder_fft_fmul_ibs_U4 : component Reorder_fft_fmul_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_352_p0,
        din1 => grp_fu_352_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_352_p2);

    Reorder_fft_fmul_ibs_U5 : component Reorder_fft_fmul_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => IM_vec_128_b_reg_950,
        din1 => tmp_10_reg_994,
        ce => ap_const_logic_1,
        dout => grp_fu_356_p2);

    Reorder_fft_fmul_ibs_U6 : component Reorder_fft_fmul_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_10_reg_994,
        din1 => IM_vec_128_d_load_ph_reg_1012,
        ce => ap_const_logic_1,
        dout => grp_fu_360_p2);

    Reorder_fft_mux_4jbC_U7 : component Reorder_fft_mux_4jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3F800000,
        din1 => ap_const_lv32_BF800000,
        din2 => ap_const_lv32_3F800000,
        din3 => ap_const_lv32_BF800000,
        din4 => tmp_10_fu_611_p5,
        dout => tmp_10_fu_611_p6);

    Reorder_fft_mux_4jbC_U8 : component Reorder_fft_mux_4jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3F800000,
        din1 => ap_const_lv32_3F800000,
        din2 => ap_const_lv32_BF800000,
        din3 => ap_const_lv32_BF800000,
        din4 => tmp_32_reg_988,
        dout => tmp_14_fu_666_p6);

    Reorder_fft_mux_4jbC_U9 : component Reorder_fft_mux_4jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3F800000,
        din1 => ap_const_lv32_BF800000,
        din2 => ap_const_lv32_BF800000,
        din3 => ap_const_lv32_3F800000,
        din4 => tmp_32_reg_988,
        dout => tmp_20_fu_679_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_aux_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                c_aux_reg_318 <= c_aux_1_reg_983;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                c_aux_reg_318 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    c_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_591_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                c_reg_306 <= c_1_fu_660_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                c_reg_306 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_30_fu_513_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_329 <= ap_const_lv13_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                i_reg_329 <= i_1_reg_1065;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                IM_vec_128_a_reg_935 <= Imag_q0;
                RE_vec_128_c_0_reg_930 <= Real_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                IM_vec_128_b_reg_950 <= Imag_q0;
                RE_vec_128_d_0_reg_945 <= Real_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                IM_vec_128_c_0_reg_955 <= Imag_q0;
                IM_vec_128_c_1_reg_960 <= Real_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_591_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                IM_vec_128_c_load_ph_reg_1017 <= IM_vec_128_c_load_ph_fu_649_p3;
                IM_vec_128_d_load_ph_reg_1012 <= IM_vec_128_d_load_ph_fu_643_p3;
                RE_vec_128_c_load_ph_reg_1007 <= RE_vec_128_c_load_ph_fu_636_p3;
                RE_vec_128_d_load_ph_reg_1002 <= RE_vec_128_d_load_ph_fu_629_p3;
                sum8_reg_1022 <= sum8_fu_655_p2;
                tmp_10_reg_994 <= tmp_10_fu_611_p6;
                tmp_32_reg_988 <= tmp_32_fu_607_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                IM_vec_128_d_0_reg_970 <= Imag_q0;
                IM_vec_128_d_1_reg_975 <= Real_r_q0;
                tmp_31_reg_965 <= tmp_31_fu_587_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    Imag_addr_1_reg_920(13 downto 2) <= tmp_6_fu_581_p1(14 - 1 downto 0)(13 downto 2);
                    Real_addr_3_reg_915(13 downto 2) <= tmp_6_fu_581_p1(14 - 1 downto 0)(13 downto 2);
                    tmp_4_reg_905(0) <= tmp_4_fu_576_p1(0);    tmp_4_reg_905(31 downto 2) <= tmp_4_fu_576_p1(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                Imag_addr_5_reg_1105 <= tmp_24_fu_790_p1(14 - 1 downto 0);
                Imag_addr_6_reg_1115 <= tmp_25_fu_796_p1(14 - 1 downto 0);
                Real_addr_5_reg_1100 <= tmp_24_fu_790_p1(14 - 1 downto 0);
                Real_addr_6_reg_1110 <= tmp_25_fu_796_p1(14 - 1 downto 0);
                indexI_fu_102 <= indexI_3_fu_762_p3;
                indexJ_fu_98 <= indexJ_3_fu_783_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_30_fu_513_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    Imag_addr_reg_871(13 downto 1) <= tmp_5_fu_529_p1(14 - 1 downto 0)(13 downto 1);
                    Real_addr_2_reg_866(13 downto 1) <= tmp_5_fu_529_p1(14 - 1 downto 0)(13 downto 1);
                tmp_3_reg_856 <= tmp_3_fu_524_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                c_aux_1_reg_983 <= c_aux_1_fu_597_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                i_1_reg_1065 <= i_1_fu_702_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    leng_reorder_2_reg_843(6 downto 5) <= leng_reorder_2_fu_446_p3(6 downto 5);    leng_reorder_2_reg_843(11 downto 9) <= leng_reorder_2_fu_446_p3(11 downto 9);
                tmp_1_reg_833 <= tmp_1_fu_427_p2;
                    tmp_29_reg_848(31 downto 2) <= tmp_29_fu_505_p3(31 downto 2);
                tmp_7_reg_838 <= tmp_7_fu_440_p2;
                tmp_reg_826 <= tmp_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                p_lshr_reg_821 <= p_neg_fu_406_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_364 <= Real_r_q0;
                reg_370 <= Imag_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_375 <= Real_r_q0;
                reg_381 <= Imag_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state15))) then
                reg_386 <= grp_fu_352_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state23))) then
                reg_392 <= grp_fu_340_p2;
                reg_399 <= grp_fu_344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_30_fu_513_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                sel_tmp2_reg_893 <= sel_tmp2_fu_548_p2;
                sel_tmp7_reg_899 <= sel_tmp7_fu_558_p2;
                    tmp_9_reg_888(6 downto 5) <= tmp_9_fu_540_p1(6 downto 5);    tmp_9_reg_888(12 downto 9) <= tmp_9_fu_540_p1(12 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp_14_reg_1047 <= tmp_14_fu_666_p6;
                tmp_20_reg_1052 <= tmp_20_fu_679_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                tmp_15_reg_1057 <= grp_fu_348_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_17_reg_1037 <= grp_fu_356_p2;
                tmp_18_reg_1042 <= grp_fu_360_p2;
                tmp_s_reg_1032 <= grp_fu_348_p2;
            end if;
        end if;
    end process;
    leng_reorder_2_reg_843(4 downto 0) <= "00000";
    leng_reorder_2_reg_843(8 downto 7) <= "11";
    tmp_29_reg_848(1 downto 0) <= "00";
    Real_addr_2_reg_866(0) <= '1';
    Imag_addr_reg_871(0) <= '1';
    tmp_9_reg_888(4 downto 0) <= "00000";
    tmp_9_reg_888(8 downto 7) <= "11";
    tmp_4_reg_905(1) <= '1';
    tmp_4_reg_905(63 downto 32) <= "00000000000000000000000000000000";
    Real_addr_3_reg_915(1 downto 0) <= "11";
    Imag_addr_1_reg_920(1 downto 0) <= "11";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, tmp_30_fu_513_p2, ap_CS_fsm_state10, exitcond_fu_591_p2, ap_CS_fsm_state46, exitcond1_fu_697_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((tmp_30_fu_513_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((exitcond_fu_591_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state46 => 
                if (((exitcond1_fu_697_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    IM_vec_128_c_load_ph_fu_649_p3 <= 
        IM_vec_128_c_1_reg_960 when (tmp_33_fu_625_p1(0) = '1') else 
        IM_vec_128_c_0_reg_955;
    IM_vec_128_d_load_ph_fu_643_p3 <= 
        IM_vec_128_d_1_reg_975 when (tmp_33_fu_625_p1(0) = '1') else 
        IM_vec_128_d_0_reg_970;

    Imag_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state49, ap_CS_fsm_state5, tmp_3_reg_856, ap_CS_fsm_state3, Imag_addr_reg_871, tmp_4_reg_905, Imag_addr_1_reg_920, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, Imag_addr_5_reg_1105, Imag_addr_6_reg_1115, ap_CS_fsm_state45, ap_CS_fsm_state52, tmp_5_fu_529_p1, tmp_6_fu_581_p1, sum8_cast_fu_692_p1, ap_CS_fsm_state48, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            Imag_address0 <= Imag_addr_6_reg_1115;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            Imag_address0 <= Imag_addr_5_reg_1105;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            Imag_address0 <= sum8_cast_fu_692_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Imag_address0 <= Imag_addr_1_reg_920;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Imag_address0 <= Imag_addr_reg_871;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Imag_address0 <= tmp_4_reg_905(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Imag_address0 <= tmp_3_reg_856(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Imag_address0 <= tmp_6_fu_581_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Imag_address0 <= tmp_5_fu_529_p1(14 - 1 downto 0);
        else 
            Imag_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    Imag_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state49, ap_CS_fsm_state5, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state48, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            Imag_ce0 <= ap_const_logic_1;
        else 
            Imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Imag_d0_assign_proc : process(reg_370, reg_381, reg_399, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            Imag_d0 <= reg_370;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            Imag_d0 <= reg_381;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            Imag_d0 <= reg_399;
        else 
            Imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Imag_we0_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            Imag_we0 <= ap_const_logic_1;
        else 
            Imag_we0 <= ap_const_logic_0;
        end if; 
    end process;

    RE_vec_128_c_load_ph_fu_636_p3 <= 
        reg_370 when (tmp_33_fu_625_p1(0) = '1') else 
        RE_vec_128_c_0_reg_930;
    RE_vec_128_d_load_ph_fu_629_p3 <= 
        reg_381 when (tmp_33_fu_625_p1(0) = '1') else 
        RE_vec_128_d_0_reg_945;

    Real_r_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state49, ap_CS_fsm_state5, tmp_3_fu_524_p1, ap_CS_fsm_state3, Real_addr_2_reg_866, tmp_4_fu_576_p1, Real_addr_3_reg_915, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, Real_addr_5_reg_1100, Real_addr_6_reg_1110, ap_CS_fsm_state45, ap_CS_fsm_state52, sum8_cast_fu_692_p1, ap_CS_fsm_state48, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            Real_r_address0 <= Real_addr_6_reg_1110;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            Real_r_address0 <= Real_addr_5_reg_1100;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            Real_r_address0 <= sum8_cast_fu_692_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            Real_r_address0 <= Real_addr_3_reg_915;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            Real_r_address0 <= Real_addr_2_reg_866;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Real_r_address0 <= tmp_4_fu_576_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Real_r_address0 <= tmp_3_fu_524_p1(14 - 1 downto 0);
        else 
            Real_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    Real_r_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state49, ap_CS_fsm_state5, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state48, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            Real_r_ce0 <= ap_const_logic_1;
        else 
            Real_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Real_r_d0_assign_proc : process(reg_364, reg_375, reg_392, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            Real_r_d0 <= reg_364;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            Real_r_d0 <= reg_375;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            Real_r_d0 <= reg_392;
        else 
            Real_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Real_r_we0_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            Real_r_we0 <= ap_const_logic_1;
        else 
            Real_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state46, exitcond1_fu_697_p2)
    begin
        if (((exitcond1_fu_697_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state46, exitcond1_fu_697_p2)
    begin
        if (((exitcond1_fu_697_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_1_fu_660_p2 <= std_logic_vector(signed(c_reg_306) + signed(ap_const_lv32_4));
    c_aux_1_fu_597_p2 <= std_logic_vector(unsigned(c_aux_reg_318) + unsigned(ap_const_lv3_1));
    exitcond1_fu_697_p2 <= "1" when (i_reg_329 = tmp_9_reg_888) else "0";
    exitcond_fu_591_p2 <= "1" when (c_aux_reg_318 = ap_const_lv3_4) else "0";

    grp_fu_340_p0_assign_proc : process(reg_386, reg_392, tmp_s_reg_1032, ap_CS_fsm_state16, ap_CS_fsm_state29, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_340_p0 <= reg_392;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_340_p0 <= tmp_s_reg_1032;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_340_p0 <= reg_386;
        else 
            grp_fu_340_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_340_p1_assign_proc : process(reg_364, RE_vec_128_c_load_ph_reg_1007, tmp_15_reg_1057, ap_CS_fsm_state16, ap_CS_fsm_state29, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_340_p1 <= reg_364;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_340_p1 <= tmp_15_reg_1057;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_340_p1 <= RE_vec_128_c_load_ph_reg_1007;
        else 
            grp_fu_340_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_344_p0_assign_proc : process(reg_399, tmp_17_reg_1037, tmp_18_reg_1042, ap_CS_fsm_state16, ap_CS_fsm_state29, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_344_p0 <= reg_399;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_344_p0 <= tmp_17_reg_1037;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_344_p0 <= tmp_18_reg_1042;
        else 
            grp_fu_344_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_344_p1_assign_proc : process(reg_386, IM_vec_128_a_reg_935, IM_vec_128_c_load_ph_reg_1017, ap_CS_fsm_state16, ap_CS_fsm_state29, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_344_p1 <= IM_vec_128_a_reg_935;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_344_p1 <= reg_386;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_344_p1 <= IM_vec_128_c_load_ph_reg_1017;
        else 
            grp_fu_344_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_348_p0_assign_proc : process(reg_375, tmp_14_reg_1047, ap_CS_fsm_state11, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_348_p0 <= tmp_14_reg_1047;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_348_p0 <= reg_375;
        else 
            grp_fu_348_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_348_p1_assign_proc : process(reg_392, tmp_10_reg_994, ap_CS_fsm_state11, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_348_p1 <= reg_392;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_348_p1 <= tmp_10_reg_994;
        else 
            grp_fu_348_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_352_p0_assign_proc : process(tmp_10_reg_994, tmp_20_reg_1052, ap_CS_fsm_state11, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_352_p0 <= tmp_20_reg_1052;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_352_p0 <= tmp_10_reg_994;
        else 
            grp_fu_352_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_352_p1_assign_proc : process(reg_399, RE_vec_128_d_load_ph_reg_1002, ap_CS_fsm_state11, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_352_p1 <= reg_399;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_352_p1 <= RE_vec_128_d_load_ph_reg_1002;
        else 
            grp_fu_352_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_702_p2 <= std_logic_vector(unsigned(i_reg_329) + unsigned(ap_const_lv13_1));
    ind1_fu_518_p2 <= (c_reg_306 or ap_const_lv32_1);
    ind2_fu_564_p2 <= (c_reg_306 or ap_const_lv32_2);
    ind3_fu_570_p2 <= (c_reg_306 or ap_const_lv32_3);
    indexI_1_cast_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut_reorder_I_1024_q0),32));
    indexI_2_cast_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut_reorder_I_4096_q0),32));
    indexI_3_fu_762_p3 <= 
        indexI_4_cast_fu_740_p1 when (sel_tmp7_reg_899(0) = '1') else 
        indexI_6_fu_755_p3;
    indexI_4_cast_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut_reorder_I_16384_q0),32));
    indexI_5_fu_748_p3 <= 
        indexI_1_cast_fu_724_p1 when (tmp_reg_826(0) = '1') else 
        indexI_fu_102;
    indexI_6_fu_755_p3 <= 
        indexI_2_cast_fu_732_p1 when (sel_tmp2_reg_893(0) = '1') else 
        indexI_5_fu_748_p3;
    indexJ_1_cast_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut_reorder_J_1024_q0),32));
    indexJ_2_cast_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut_reorder_J_4096_q0),32));
    indexJ_3_fu_783_p3 <= 
        indexJ_4_cast_fu_744_p1 when (sel_tmp7_reg_899(0) = '1') else 
        indexJ_6_fu_776_p3;
    indexJ_4_cast_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut_reorder_J_16384_q0),32));
    indexJ_5_fu_769_p3 <= 
        indexJ_1_cast_fu_728_p1 when (tmp_reg_826(0) = '1') else 
        indexJ_fu_98;
    indexJ_6_fu_776_p3 <= 
        indexJ_2_cast_fu_736_p1 when (sel_tmp2_reg_893(0) = '1') else 
        indexJ_5_fu_769_p3;
    leng_reorder_2_fu_446_p3 <= 
        p_cast_fu_432_p3 when (tmp_7_fu_440_p2(0) = '1') else 
        ap_const_lv12_F80;
    lut_reorder_I_1024_address0 <= tmp_23_fu_708_p1(9 - 1 downto 0);

    lut_reorder_I_1024_ce0_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            lut_reorder_I_1024_ce0 <= ap_const_logic_1;
        else 
            lut_reorder_I_1024_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_reorder_I_16384_address0 <= tmp_23_fu_708_p1(13 - 1 downto 0);

    lut_reorder_I_16384_ce0_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            lut_reorder_I_16384_ce0 <= ap_const_logic_1;
        else 
            lut_reorder_I_16384_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_reorder_I_4096_address0 <= tmp_23_fu_708_p1(11 - 1 downto 0);

    lut_reorder_I_4096_ce0_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            lut_reorder_I_4096_ce0 <= ap_const_logic_1;
        else 
            lut_reorder_I_4096_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_reorder_J_1024_address0 <= tmp_23_fu_708_p1(9 - 1 downto 0);

    lut_reorder_J_1024_ce0_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            lut_reorder_J_1024_ce0 <= ap_const_logic_1;
        else 
            lut_reorder_J_1024_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_reorder_J_16384_address0 <= tmp_23_fu_708_p1(13 - 1 downto 0);

    lut_reorder_J_16384_ce0_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            lut_reorder_J_16384_ce0 <= ap_const_logic_1;
        else 
            lut_reorder_J_16384_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_reorder_J_4096_address0 <= tmp_23_fu_708_p1(11 - 1 downto 0);

    lut_reorder_J_4096_ce0_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            lut_reorder_J_4096_ce0 <= ap_const_logic_1;
        else 
            lut_reorder_J_4096_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    num_word_op_op_fu_461_p2 <= std_logic_vector(unsigned(num_word) + unsigned(ap_const_lv32_3));
    p_cast_fu_432_p3 <= 
        ap_const_lv12_1E0 when (tmp_fu_422_p2(0) = '1') else 
        ap_const_lv12_7E0;
    p_neg_fu_406_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFD) - signed(num_word));
    p_neg_t_fu_474_p2 <= std_logic_vector(unsigned(ap_const_lv30_0) - unsigned(p_lshr_reg_821));
    sel_tmp1_fu_543_p2 <= (tmp_reg_826 xor ap_const_lv1_1);
    sel_tmp2_fu_548_p2 <= (tmp_1_reg_833 and sel_tmp1_fu_543_p2);
    sel_tmp6_fu_553_p2 <= (tmp_7_reg_838 xor ap_const_lv1_1);
    sel_tmp7_fu_558_p2 <= (tmp_8_fu_535_p2 and sel_tmp6_fu_553_p2);
        sum8_cast_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum8_reg_1022),64));

    sum8_fu_655_p2 <= std_logic_vector(unsigned(tmp_31_reg_965) + unsigned(tmp_cast_fu_603_p1));
    tmp_10_fu_611_p5 <= c_aux_reg_318(2 - 1 downto 0);
    tmp_11_fu_466_p3 <= num_word_op_op_fu_461_p2(31 downto 31);
    tmp_1_fu_427_p2 <= "1" when (num_word = ap_const_lv32_1000) else "0";
    tmp_23_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_329),64));
        tmp_24_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(indexI_3_fu_762_p3),64));

        tmp_25_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(indexJ_3_fu_783_p3),64));

    tmp_26_fu_479_p4 <= num_word_op_op_fu_461_p2(31 downto 2);
    tmp_27_fu_489_p3 <= 
        p_neg_t_fu_474_p2 when (tmp_11_fu_466_p3(0) = '1') else 
        tmp_26_fu_479_p4;
    tmp_28_fu_497_p3 <= 
        ap_const_lv30_0 when (tmp_2_fu_454_p3(0) = '1') else 
        tmp_27_fu_489_p3;
    tmp_29_fu_505_p3 <= (tmp_28_fu_497_p3 & ap_const_lv2_0);
    tmp_2_fu_454_p3 <= num_word(31 downto 31);
    tmp_30_fu_513_p2 <= "1" when (c_reg_306 = tmp_29_reg_848) else "0";
    tmp_31_fu_587_p1 <= c_reg_306(16 - 1 downto 0);
    tmp_32_fu_607_p1 <= c_aux_reg_318(2 - 1 downto 0);
    tmp_33_fu_625_p1 <= c_aux_reg_318(1 - 1 downto 0);
        tmp_3_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(c_reg_306),64));

    tmp_4_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ind2_fu_564_p2),64));
    tmp_5_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ind1_fu_518_p2),64));
    tmp_6_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ind3_fu_570_p2),64));
    tmp_7_fu_440_p2 <= (tmp_fu_422_p2 or tmp_1_fu_427_p2);
    tmp_8_fu_535_p2 <= "1" when (num_word = ap_const_lv32_4000) else "0";
        tmp_9_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(leng_reorder_2_reg_843),13));

    tmp_cast_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_aux_reg_318),16));
    tmp_fu_422_p2 <= "1" when (num_word = ap_const_lv32_400) else "0";
end behav;
