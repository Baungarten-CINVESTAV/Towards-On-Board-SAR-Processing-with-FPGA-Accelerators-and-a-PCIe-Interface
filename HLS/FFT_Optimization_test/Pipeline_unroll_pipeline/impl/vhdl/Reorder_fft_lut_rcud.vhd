-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1.3 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Reorder_fft_lut_rcud_rom is 
    generic(
             DWIDTH     : integer := 10; 
             AWIDTH     : integer := 9; 
             MEM_SIZE    : integer := 480
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of Reorder_fft_lut_rcud_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0100000000", 1 => "1000000000", 2 => "1100000000", 3 => "0001000000", 
    4 => "0101000000", 5 => "1001000000", 6 => "1101000000", 7 => "0010000000", 
    8 => "0110000000", 9 => "1010000000", 10 => "1110000000", 11 => "0011000000", 
    12 => "0111000000", 13 => "1011000000", 14 => "1111000000", 15 => "0100010000", 
    16 => "1000010000", 17 => "1100010000", 18 => "0001010000", 19 => "0101010000", 
    20 => "1001010000", 21 => "1101010000", 22 => "0010010000", 23 => "0110010000", 
    24 => "1010010000", 25 => "1110010000", 26 => "0011010000", 27 => "0111010000", 
    28 => "1011010000", 29 => "1111010000", 30 => "0100100000", 31 => "1000100000", 
    32 => "1100100000", 33 => "0001100000", 34 => "0101100000", 35 => "1001100000", 
    36 => "1101100000", 37 => "0010100000", 38 => "0110100000", 39 => "1010100000", 
    40 => "1110100000", 41 => "0011100000", 42 => "0111100000", 43 => "1011100000", 
    44 => "1111100000", 45 => "0100110000", 46 => "1000110000", 47 => "1100110000", 
    48 => "0001110000", 49 => "0101110000", 50 => "1001110000", 51 => "1101110000", 
    52 => "0010110000", 53 => "0110110000", 54 => "1010110000", 55 => "1110110000", 
    56 => "0011110000", 57 => "0111110000", 58 => "1011110000", 59 => "1111110000", 
    60 => "0100000100", 61 => "1000000100", 62 => "1100000100", 63 => "0101000100", 
    64 => "1001000100", 65 => "1101000100", 66 => "0010000100", 67 => "0110000100", 
    68 => "1010000100", 69 => "1110000100", 70 => "0011000100", 71 => "0111000100", 
    72 => "1011000100", 73 => "1111000100", 74 => "0100010100", 75 => "1000010100", 
    76 => "1100010100", 77 => "0101010100", 78 => "1001010100", 79 => "1101010100", 
    80 => "0010010100", 81 => "0110010100", 82 => "1010010100", 83 => "1110010100", 
    84 => "0011010100", 85 => "0111010100", 86 => "1011010100", 87 => "1111010100", 
    88 => "0100100100", 89 => "1000100100", 90 => "1100100100", 91 => "0101100100", 
    92 => "1001100100", 93 => "1101100100", 94 => "0010100100", 95 => "0110100100", 
    96 => "1010100100", 97 => "1110100100", 98 => "0011100100", 99 => "0111100100", 
    100 => "1011100100", 101 => "1111100100", 102 => "0100110100", 103 => "1000110100", 
    104 => "1100110100", 105 => "0101110100", 106 => "1001110100", 107 => "1101110100", 
    108 => "0010110100", 109 => "0110110100", 110 => "1010110100", 111 => "1110110100", 
    112 => "0011110100", 113 => "0111110100", 114 => "1011110100", 115 => "1111110100", 
    116 => "0100001000", 117 => "1000001000", 118 => "1100001000", 119 => "0101001000", 
    120 => "1001001000", 121 => "1101001000", 122 => "0110001000", 123 => "1010001000", 
    124 => "1110001000", 125 => "0011001000", 126 => "0111001000", 127 => "1011001000", 
    128 => "1111001000", 129 => "0100011000", 130 => "1000011000", 131 => "1100011000", 
    132 => "0101011000", 133 => "1001011000", 134 => "1101011000", 135 => "0110011000", 
    136 => "1010011000", 137 => "1110011000", 138 => "0011011000", 139 => "0111011000", 
    140 => "1011011000", 141 => "1111011000", 142 => "0100101000", 143 => "1000101000", 
    144 => "1100101000", 145 => "0101101000", 146 => "1001101000", 147 => "1101101000", 
    148 => "0110101000", 149 => "1010101000", 150 => "1110101000", 151 => "0011101000", 
    152 => "0111101000", 153 => "1011101000", 154 => "1111101000", 155 => "0100111000", 
    156 => "1000111000", 157 => "1100111000", 158 => "0101111000", 159 => "1001111000", 
    160 => "1101111000", 161 => "0110111000", 162 => "1010111000", 163 => "1110111000", 
    164 => "0011111000", 165 => "0111111000", 166 => "1011111000", 167 => "1111111000", 
    168 => "0100001100", 169 => "1000001100", 170 => "1100001100", 171 => "0101001100", 
    172 => "1001001100", 173 => "1101001100", 174 => "0110001100", 175 => "1010001100", 
    176 => "1110001100", 177 => "0111001100", 178 => "1011001100", 179 => "1111001100", 
    180 => "0100011100", 181 => "1000011100", 182 => "1100011100", 183 => "0101011100", 
    184 => "1001011100", 185 => "1101011100", 186 => "0110011100", 187 => "1010011100", 
    188 => "1110011100", 189 => "0111011100", 190 => "1011011100", 191 => "1111011100", 
    192 => "0100101100", 193 => "1000101100", 194 => "1100101100", 195 => "0101101100", 
    196 => "1001101100", 197 => "1101101100", 198 => "0110101100", 199 => "1010101100", 
    200 => "1110101100", 201 => "0111101100", 202 => "1011101100", 203 => "1111101100", 
    204 => "0100111100", 205 => "1000111100", 206 => "1100111100", 207 => "0101111100", 
    208 => "1001111100", 209 => "1101111100", 210 => "0110111100", 211 => "1010111100", 
    212 => "1110111100", 213 => "0111111100", 214 => "1011111100", 215 => "1111111100", 
    216 => "1000000001", 217 => "1100000001", 218 => "0101000001", 219 => "1001000001", 
    220 => "1101000001", 221 => "0110000001", 222 => "1010000001", 223 => "1110000001", 
    224 => "0111000001", 225 => "1011000001", 226 => "1111000001", 227 => "1000010001", 
    228 => "1100010001", 229 => "0101010001", 230 => "1001010001", 231 => "1101010001", 
    232 => "0110010001", 233 => "1010010001", 234 => "1110010001", 235 => "0111010001", 
    236 => "1011010001", 237 => "1111010001", 238 => "1000100001", 239 => "1100100001", 
    240 => "0101100001", 241 => "1001100001", 242 => "1101100001", 243 => "0110100001", 
    244 => "1010100001", 245 => "1110100001", 246 => "0111100001", 247 => "1011100001", 
    248 => "1111100001", 249 => "1000110001", 250 => "1100110001", 251 => "0101110001", 
    252 => "1001110001", 253 => "1101110001", 254 => "0110110001", 255 => "1010110001", 
    256 => "1110110001", 257 => "0111110001", 258 => "1011110001", 259 => "1111110001", 
    260 => "1000000101", 261 => "1100000101", 262 => "1001000101", 263 => "1101000101", 
    264 => "0110000101", 265 => "1010000101", 266 => "1110000101", 267 => "0111000101", 
    268 => "1011000101", 269 => "1111000101", 270 => "1000010101", 271 => "1100010101", 
    272 => "1001010101", 273 => "1101010101", 274 => "0110010101", 275 => "1010010101", 
    276 => "1110010101", 277 => "0111010101", 278 => "1011010101", 279 => "1111010101", 
    280 => "1000100101", 281 => "1100100101", 282 => "1001100101", 283 => "1101100101", 
    284 => "0110100101", 285 => "1010100101", 286 => "1110100101", 287 => "0111100101", 
    288 => "1011100101", 289 => "1111100101", 290 => "1000110101", 291 => "1100110101", 
    292 => "1001110101", 293 => "1101110101", 294 => "0110110101", 295 => "1010110101", 
    296 => "1110110101", 297 => "0111110101", 298 => "1011110101", 299 => "1111110101", 
    300 => "1000001001", 301 => "1100001001", 302 => "1001001001", 303 => "1101001001", 
    304 => "1010001001", 305 => "1110001001", 306 => "0111001001", 307 => "1011001001", 
    308 => "1111001001", 309 => "1000011001", 310 => "1100011001", 311 => "1001011001", 
    312 => "1101011001", 313 => "1010011001", 314 => "1110011001", 315 => "0111011001", 
    316 => "1011011001", 317 => "1111011001", 318 => "1000101001", 319 => "1100101001", 
    320 => "1001101001", 321 => "1101101001", 322 => "1010101001", 323 => "1110101001", 
    324 => "0111101001", 325 => "1011101001", 326 => "1111101001", 327 => "1000111001", 
    328 => "1100111001", 329 => "1001111001", 330 => "1101111001", 331 => "1010111001", 
    332 => "1110111001", 333 => "0111111001", 334 => "1011111001", 335 => "1111111001", 
    336 => "1000001101", 337 => "1100001101", 338 => "1001001101", 339 => "1101001101", 
    340 => "1010001101", 341 => "1110001101", 342 => "1011001101", 343 => "1111001101", 
    344 => "1000011101", 345 => "1100011101", 346 => "1001011101", 347 => "1101011101", 
    348 => "1010011101", 349 => "1110011101", 350 => "1011011101", 351 => "1111011101", 
    352 => "1000101101", 353 => "1100101101", 354 => "1001101101", 355 => "1101101101", 
    356 => "1010101101", 357 => "1110101101", 358 => "1011101101", 359 => "1111101101", 
    360 => "1000111101", 361 => "1100111101", 362 => "1001111101", 363 => "1101111101", 
    364 => "1010111101", 365 => "1110111101", 366 => "1011111101", 367 => "1111111101", 
    368 => "1100000010", 369 => "1001000010", 370 => "1101000010", 371 => "1010000010", 
    372 => "1110000010", 373 => "1011000010", 374 => "1111000010", 375 => "1100010010", 
    376 => "1001010010", 377 => "1101010010", 378 => "1010010010", 379 => "1110010010", 
    380 => "1011010010", 381 => "1111010010", 382 => "1100100010", 383 => "1001100010", 
    384 => "1101100010", 385 => "1010100010", 386 => "1110100010", 387 => "1011100010", 
    388 => "1111100010", 389 => "1100110010", 390 => "1001110010", 391 => "1101110010", 
    392 => "1010110010", 393 => "1110110010", 394 => "1011110010", 395 => "1111110010", 
    396 => "1100000110", 397 => "1101000110", 398 => "1010000110", 399 => "1110000110", 
    400 => "1011000110", 401 => "1111000110", 402 => "1100010110", 403 => "1101010110", 
    404 => "1010010110", 405 => "1110010110", 406 => "1011010110", 407 => "1111010110", 
    408 => "1100100110", 409 => "1101100110", 410 => "1010100110", 411 => "1110100110", 
    412 => "1011100110", 413 => "1111100110", 414 => "1100110110", 415 => "1101110110", 
    416 => "1010110110", 417 => "1110110110", 418 => "1011110110", 419 => "1111110110", 
    420 => "1100001010", 421 => "1101001010", 422 => "1110001010", 423 => "1011001010", 
    424 => "1111001010", 425 => "1100011010", 426 => "1101011010", 427 => "1110011010", 
    428 => "1011011010", 429 => "1111011010", 430 => "1100101010", 431 => "1101101010", 
    432 => "1110101010", 433 => "1011101010", 434 => "1111101010", 435 => "1100111010", 
    436 => "1101111010", 437 => "1110111010", 438 => "1011111010", 439 => "1111111010", 
    440 => "1100001110", 441 => "1101001110", 442 => "1110001110", 443 => "1111001110", 
    444 => "1100011110", 445 => "1101011110", 446 => "1110011110", 447 => "1111011110", 
    448 => "1100101110", 449 => "1101101110", 450 => "1110101110", 451 => "1111101110", 
    452 => "1100111110", 453 => "1101111110", 454 => "1110111110", 455 => "1111111110", 
    456 => "1101000011", 457 => "1110000011", 458 => "1111000011", 459 => "1101010011", 
    460 => "1110010011", 461 => "1111010011", 462 => "1101100011", 463 => "1110100011", 
    464 => "1111100011", 465 => "1101110011", 466 => "1110110011", 467 => "1111110011", 
    468 => "1110000111", 469 => "1111000111", 470 => "1110010111", 471 => "1111010111", 
    472 => "1110100111", 473 => "1111100111", 474 => "1110110111", 475 => "1111110111", 
    476 => "1111001011", 477 => "1111011011", 478 => "1111101011", 479 => "1111111011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity Reorder_fft_lut_rcud is
    generic (
        DataWidth : INTEGER := 10;
        AddressRange : INTEGER := 480;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of Reorder_fft_lut_rcud is
    component Reorder_fft_lut_rcud_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    Reorder_fft_lut_rcud_rom_U :  component Reorder_fft_lut_rcud_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


