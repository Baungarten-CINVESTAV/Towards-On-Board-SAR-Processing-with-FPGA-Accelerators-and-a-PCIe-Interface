// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Reorder_fft,hls_ip_2019_1_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.660000,HLS_SYN_LAT=23906,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=20,HLS_SYN_FF=2326,HLS_SYN_LUT=3606,HLS_VERSION=2019_1_3}" *)

module Reorder_fft (
        ap_clk,
        ap_rst_n,
        Real_r_Addr_A,
        Real_r_EN_A,
        Real_r_WEN_A,
        Real_r_Din_A,
        Real_r_Dout_A,
        Real_r_Clk_A,
        Real_r_Rst_A,
        Imag_Addr_A,
        Imag_EN_A,
        Imag_WEN_A,
        Imag_Din_A,
        Imag_Dout_A,
        Imag_Clk_A,
        Imag_Rst_A,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 32'd1;
parameter    ap_ST_fsm_state2 = 32'd2;
parameter    ap_ST_fsm_state3 = 32'd4;
parameter    ap_ST_fsm_state4 = 32'd8;
parameter    ap_ST_fsm_state5 = 32'd16;
parameter    ap_ST_fsm_state6 = 32'd32;
parameter    ap_ST_fsm_state7 = 32'd64;
parameter    ap_ST_fsm_state8 = 32'd128;
parameter    ap_ST_fsm_state9 = 32'd256;
parameter    ap_ST_fsm_state10 = 32'd512;
parameter    ap_ST_fsm_state11 = 32'd1024;
parameter    ap_ST_fsm_state12 = 32'd2048;
parameter    ap_ST_fsm_state13 = 32'd4096;
parameter    ap_ST_fsm_state14 = 32'd8192;
parameter    ap_ST_fsm_state15 = 32'd16384;
parameter    ap_ST_fsm_state16 = 32'd32768;
parameter    ap_ST_fsm_state17 = 32'd65536;
parameter    ap_ST_fsm_state18 = 32'd131072;
parameter    ap_ST_fsm_state19 = 32'd262144;
parameter    ap_ST_fsm_state20 = 32'd524288;
parameter    ap_ST_fsm_state21 = 32'd1048576;
parameter    ap_ST_fsm_state22 = 32'd2097152;
parameter    ap_ST_fsm_state23 = 32'd4194304;
parameter    ap_ST_fsm_state24 = 32'd8388608;
parameter    ap_ST_fsm_state25 = 32'd16777216;
parameter    ap_ST_fsm_state26 = 32'd33554432;
parameter    ap_ST_fsm_state27 = 32'd67108864;
parameter    ap_ST_fsm_state28 = 32'd134217728;
parameter    ap_ST_fsm_state29 = 32'd268435456;
parameter    ap_ST_fsm_state30 = 32'd536870912;
parameter    ap_ST_fsm_state31 = 32'd1073741824;
parameter    ap_ST_fsm_state32 = 32'd2147483648;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [31:0] Real_r_Addr_A;
output   Real_r_EN_A;
output  [3:0] Real_r_WEN_A;
output  [31:0] Real_r_Din_A;
input  [31:0] Real_r_Dout_A;
output   Real_r_Clk_A;
output   Real_r_Rst_A;
output  [31:0] Imag_Addr_A;
output   Imag_EN_A;
output  [3:0] Imag_WEN_A;
output  [31:0] Imag_Din_A;
input  [31:0] Imag_Dout_A;
output   Imag_Clk_A;
output   Imag_Rst_A;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg Real_r_EN_A;
reg[3:0] Real_r_WEN_A;
reg[31:0] Real_r_Din_A;
reg Imag_EN_A;
reg[3:0] Imag_WEN_A;
reg[31:0] Imag_Din_A;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [31:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [8:0] lut_reorder_I_address0;
reg    lut_reorder_I_ce0;
wire   [9:0] lut_reorder_I_q0;
wire   [8:0] lut_reorder_J_address0;
reg    lut_reorder_J_ce0;
wire   [9:0] lut_reorder_J_q0;
reg   [31:0] reg_290;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state30;
reg   [31:0] reg_296;
wire   [31:0] grp_fu_274_p2;
reg   [31:0] reg_301;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state21;
wire   [31:0] grp_fu_278_p2;
reg   [31:0] reg_306;
wire   [31:0] grp_fu_258_p2;
reg   [31:0] reg_311;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state26;
wire   [31:0] grp_fu_262_p2;
reg   [31:0] reg_317;
wire   [9:0] trunc_ln42_fu_331_p1;
reg   [9:0] trunc_ln42_reg_519;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_14_fu_323_p3;
wire   [63:0] zext_ln50_fu_341_p1;
reg   [63:0] zext_ln50_reg_525;
reg   [9:0] Real_addr_2_reg_535;
reg   [9:0] Imag_addr_reg_540;
wire   [63:0] zext_ln51_fu_362_p1;
reg   [63:0] zext_ln51_reg_545;
reg   [9:0] Real_addr_3_reg_555;
reg   [9:0] Imag_addr_1_reg_560;
reg   [31:0] RE_vec_128_b_reg_565;
wire    ap_CS_fsm_state4;
reg   [31:0] RE_vec_128_d_1_reg_570;
reg   [31:0] RE_vec_128_c_0_reg_580;
wire    ap_CS_fsm_state5;
reg   [31:0] IM_vec_128_a_reg_585;
reg   [31:0] RE_vec_128_d_0_reg_595;
wire    ap_CS_fsm_state6;
reg   [31:0] IM_vec_128_b_reg_600;
reg   [31:0] IM_vec_128_c_0_reg_605;
wire    ap_CS_fsm_state7;
reg   [31:0] IM_vec_128_c_1_reg_610;
reg   [31:0] IM_vec_128_d_0_reg_615;
wire    ap_CS_fsm_state8;
reg   [31:0] IM_vec_128_d_1_reg_620;
wire   [2:0] c_aux_fu_379_p2;
reg   [2:0] c_aux_reg_628;
wire    ap_CS_fsm_state9;
wire   [1:0] trunc_ln76_fu_389_p1;
reg   [1:0] trunc_ln76_reg_633;
wire   [0:0] icmp_ln68_fu_373_p2;
wire   [31:0] tmp_11_fu_393_p6;
wire   [31:0] select_ln77_fu_415_p3;
wire   [31:0] select_ln77_1_fu_422_p3;
reg   [31:0] select_ln77_1_reg_652;
wire   [31:0] select_ln83_1_fu_436_p3;
reg   [31:0] select_ln83_1_reg_662;
wire   [10:0] add_ln86_fu_442_p2;
reg   [10:0] add_ln86_reg_667;
wire   [10:0] c_fu_448_p2;
wire   [31:0] grp_fu_282_p2;
reg   [31:0] tmp_6_reg_677;
wire   [31:0] grp_fu_286_p2;
reg   [31:0] tmp_8_reg_682;
wire   [31:0] grp_fu_266_p2;
reg   [31:0] tmp_7_reg_687;
wire   [31:0] grp_fu_270_p2;
reg   [31:0] tmp_9_reg_692;
wire   [31:0] tmp_12_fu_454_p6;
wire    ap_CS_fsm_state18;
wire   [31:0] tmp_13_fu_468_p6;
wire   [8:0] i_fu_493_p2;
reg   [8:0] i_reg_710;
wire    ap_CS_fsm_state28;
wire   [0:0] icmp_ln93_fu_487_p2;
reg   [9:0] indexJ_reg_725;
wire    ap_CS_fsm_state29;
reg   [9:0] Real_addr_4_reg_730;
reg   [9:0] Imag_addr_4_reg_735;
reg   [9:0] Real_addr_5_reg_740;
reg   [9:0] Imag_addr_5_reg_745;
reg   [10:0] c_0_reg_224;
reg   [2:0] c_aux_0_reg_236;
wire    ap_CS_fsm_state27;
reg   [8:0] i_0_reg_247;
wire    ap_CS_fsm_state32;
wire   [63:0] zext_ln52_fu_346_p1;
wire   [63:0] zext_ln54_fu_367_p1;
wire   [63:0] zext_ln86_fu_482_p1;
wire   [63:0] zext_ln97_fu_499_p1;
wire   [63:0] zext_ln100_fu_505_p1;
wire   [63:0] zext_ln102_fu_511_p1;
reg   [31:0] Real_r_Addr_A_orig;
wire    ap_CS_fsm_state31;
reg   [31:0] Imag_Addr_A_orig;
reg   [31:0] grp_fu_258_p1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state22;
reg   [31:0] grp_fu_262_p1;
reg   [31:0] grp_fu_274_p0;
reg   [31:0] grp_fu_274_p1;
reg   [31:0] grp_fu_278_p0;
reg   [31:0] grp_fu_278_p1;
wire   [31:0] grp_fu_286_p1;
wire   [9:0] ind1_fu_335_p2;
wire   [9:0] ind2_fu_352_p2;
wire   [9:0] ind3_fu_357_p2;
wire   [1:0] tmp_11_fu_393_p5;
wire   [0:0] trunc_ln77_fu_411_p1;
wire   [10:0] zext_ln76_fu_385_p1;
reg   [31:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 32'd1;
end

Reorder_fft_lut_rbkb #(
    .DataWidth( 10 ),
    .AddressRange( 480 ),
    .AddressWidth( 9 ))
lut_reorder_I_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lut_reorder_I_address0),
    .ce0(lut_reorder_I_ce0),
    .q0(lut_reorder_I_q0)
);

Reorder_fft_lut_rcud #(
    .DataWidth( 10 ),
    .AddressRange( 480 ),
    .AddressWidth( 9 ))
lut_reorder_J_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lut_reorder_J_address0),
    .ce0(lut_reorder_J_ce0),
    .q0(lut_reorder_J_q0)
);

Reorder_fft_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
Reorder_fft_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

Reorder_fft_fadd_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Reorder_fft_fadd_dEe_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_301),
    .din1(grp_fu_258_p1),
    .ce(1'b1),
    .dout(grp_fu_258_p2)
);

Reorder_fft_fadd_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Reorder_fft_fadd_dEe_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_306),
    .din1(grp_fu_262_p1),
    .ce(1'b1),
    .dout(grp_fu_262_p2)
);

Reorder_fft_fadd_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Reorder_fft_fadd_dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_6_reg_677),
    .din1(IM_vec_128_a_reg_585),
    .ce(1'b1),
    .dout(grp_fu_266_p2)
);

Reorder_fft_fadd_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Reorder_fft_fadd_dEe_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_8_reg_682),
    .din1(select_ln83_1_reg_662),
    .ce(1'b1),
    .dout(grp_fu_270_p2)
);

Reorder_fft_fmul_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Reorder_fft_fmul_eOg_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_274_p0),
    .din1(grp_fu_274_p1),
    .ce(1'b1),
    .dout(grp_fu_274_p2)
);

Reorder_fft_fmul_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Reorder_fft_fmul_eOg_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_278_p0),
    .din1(grp_fu_278_p1),
    .ce(1'b1),
    .dout(grp_fu_278_p2)
);

Reorder_fft_fmul_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Reorder_fft_fmul_eOg_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_11_fu_393_p6),
    .din1(IM_vec_128_b_reg_600),
    .ce(1'b1),
    .dout(grp_fu_282_p2)
);

Reorder_fft_fmul_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Reorder_fft_fmul_eOg_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_11_fu_393_p6),
    .din1(grp_fu_286_p1),
    .ce(1'b1),
    .dout(grp_fu_286_p2)
);

Reorder_fft_mux_4fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
Reorder_fft_mux_4fYi_U9(
    .din0(32'd1065353216),
    .din1(32'd3212836864),
    .din2(32'd1065353216),
    .din3(32'd3212836864),
    .din4(tmp_11_fu_393_p5),
    .dout(tmp_11_fu_393_p6)
);

Reorder_fft_mux_4fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
Reorder_fft_mux_4fYi_U10(
    .din0(32'd1065353216),
    .din1(32'd1065353216),
    .din2(32'd3212836864),
    .din3(32'd3212836864),
    .din4(trunc_ln76_reg_633),
    .dout(tmp_12_fu_454_p6)
);

Reorder_fft_mux_4fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
Reorder_fft_mux_4fYi_U11(
    .din0(32'd1065353216),
    .din1(32'd3212836864),
    .din2(32'd3212836864),
    .din3(32'd1065353216),
    .din4(trunc_ln76_reg_633),
    .dout(tmp_13_fu_468_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        c_0_reg_224 <= c_fu_448_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_224 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        c_aux_0_reg_236 <= c_aux_reg_628;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        c_aux_0_reg_236 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_14_fu_323_p3 == 1'd1))) begin
        i_0_reg_247 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        i_0_reg_247 <= i_reg_710;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        IM_vec_128_a_reg_585 <= Imag_Dout_A;
        RE_vec_128_c_0_reg_580 <= Real_r_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        IM_vec_128_b_reg_600 <= Imag_Dout_A;
        RE_vec_128_d_0_reg_595 <= Real_r_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        IM_vec_128_c_0_reg_605 <= Imag_Dout_A;
        IM_vec_128_c_1_reg_610 <= Real_r_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        IM_vec_128_d_0_reg_615 <= Imag_Dout_A;
        IM_vec_128_d_1_reg_620 <= Real_r_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Imag_addr_1_reg_560[9 : 2] <= zext_ln54_fu_367_p1[9 : 2];
        Real_addr_3_reg_555[9 : 2] <= zext_ln54_fu_367_p1[9 : 2];
        zext_ln51_reg_545[0] <= zext_ln51_fu_362_p1[0];
zext_ln51_reg_545[9 : 2] <= zext_ln51_fu_362_p1[9 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        Imag_addr_4_reg_735 <= zext_ln100_fu_505_p1;
        Real_addr_4_reg_730 <= zext_ln100_fu_505_p1;
        indexJ_reg_725 <= lut_reorder_J_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        Imag_addr_5_reg_745 <= zext_ln102_fu_511_p1;
        Real_addr_5_reg_740 <= zext_ln102_fu_511_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_14_fu_323_p3 == 1'd0))) begin
        Imag_addr_reg_540[9 : 1] <= zext_ln52_fu_346_p1[9 : 1];
        Real_addr_2_reg_535[9 : 1] <= zext_ln52_fu_346_p1[9 : 1];
        trunc_ln42_reg_519 <= trunc_ln42_fu_331_p1;
        zext_ln50_reg_525[10 : 0] <= zext_ln50_fu_341_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        RE_vec_128_b_reg_565 <= Real_r_Dout_A;
        RE_vec_128_d_1_reg_570 <= Imag_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln68_fu_373_p2 == 1'd0))) begin
        add_ln86_reg_667 <= add_ln86_fu_442_p2;
        select_ln77_1_reg_652 <= select_ln77_1_fu_422_p3;
        select_ln83_1_reg_662 <= select_ln83_1_fu_436_p3;
        trunc_ln76_reg_633 <= trunc_ln76_fu_389_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        c_aux_reg_628 <= c_aux_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        i_reg_710 <= i_fu_493_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_290 <= Real_r_Dout_A;
        reg_296 <= Imag_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_301 <= grp_fu_274_p2;
        reg_306 <= grp_fu_278_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state17))) begin
        reg_311 <= grp_fu_258_p2;
        reg_317 <= grp_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_6_reg_677 <= grp_fu_282_p2;
        tmp_8_reg_682 <= grp_fu_286_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_7_reg_687 <= grp_fu_266_p2;
        tmp_9_reg_692 <= grp_fu_270_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        Imag_Addr_A_orig = Imag_addr_5_reg_745;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        Imag_Addr_A_orig = Imag_addr_4_reg_735;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        Imag_Addr_A_orig = zext_ln102_fu_511_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        Imag_Addr_A_orig = zext_ln100_fu_505_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        Imag_Addr_A_orig = zext_ln86_fu_482_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        Imag_Addr_A_orig = Imag_addr_1_reg_560;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        Imag_Addr_A_orig = Imag_addr_reg_540;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        Imag_Addr_A_orig = zext_ln51_reg_545;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Imag_Addr_A_orig = zext_ln50_reg_525;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        Imag_Addr_A_orig = zext_ln54_fu_367_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Imag_Addr_A_orig = zext_ln52_fu_346_p1;
    end else begin
        Imag_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        Imag_Din_A = reg_296;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        Imag_Din_A = Imag_Dout_A;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        Imag_Din_A = reg_317;
    end else begin
        Imag_Din_A = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state3))) begin
        Imag_EN_A = 1'b1;
    end else begin
        Imag_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state27))) begin
        Imag_WEN_A = 4'd15;
    end else begin
        Imag_WEN_A = 4'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        Real_r_Addr_A_orig = Real_addr_5_reg_740;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        Real_r_Addr_A_orig = Real_addr_4_reg_730;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        Real_r_Addr_A_orig = zext_ln102_fu_511_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        Real_r_Addr_A_orig = zext_ln100_fu_505_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        Real_r_Addr_A_orig = zext_ln86_fu_482_p1;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        Real_r_Addr_A_orig = Real_addr_3_reg_555;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        Real_r_Addr_A_orig = Real_addr_2_reg_535;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        Real_r_Addr_A_orig = zext_ln51_fu_362_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Real_r_Addr_A_orig = zext_ln50_fu_341_p1;
    end else begin
        Real_r_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        Real_r_Din_A = reg_290;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        Real_r_Din_A = Real_r_Dout_A;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        Real_r_Din_A = reg_311;
    end else begin
        Real_r_Din_A = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state3))) begin
        Real_r_EN_A = 1'b1;
    end else begin
        Real_r_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state27))) begin
        Real_r_WEN_A = 4'd15;
    end else begin
        Real_r_WEN_A = 4'd0;
    end
end

always @ (*) begin
    if (((icmp_ln93_fu_487_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_fu_487_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_258_p1 = reg_311;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_258_p1 = reg_290;
    end else begin
        grp_fu_258_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_262_p1 = tmp_7_reg_687;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_262_p1 = select_ln77_1_reg_652;
    end else begin
        grp_fu_262_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_274_p0 = tmp_12_fu_454_p6;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_274_p0 = tmp_11_fu_393_p6;
    end else begin
        grp_fu_274_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_274_p1 = reg_317;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_274_p1 = RE_vec_128_b_reg_565;
    end else begin
        grp_fu_274_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_278_p0 = tmp_13_fu_468_p6;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_278_p0 = tmp_11_fu_393_p6;
    end else begin
        grp_fu_278_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_278_p1 = tmp_9_reg_692;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_278_p1 = select_ln77_fu_415_p3;
    end else begin
        grp_fu_278_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        lut_reorder_I_ce0 = 1'b1;
    end else begin
        lut_reorder_I_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        lut_reorder_J_ce0 = 1'b1;
    end else begin
        lut_reorder_J_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_14_fu_323_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln68_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state28 : begin
            if (((icmp_ln93_fu_487_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Imag_Addr_A = Imag_Addr_A_orig << 32'd2;

assign Imag_Clk_A = ap_clk;

assign Imag_Rst_A = ap_rst_n_inv;

assign Real_r_Addr_A = Real_r_Addr_A_orig << 32'd2;

assign Real_r_Clk_A = ap_clk;

assign Real_r_Rst_A = ap_rst_n_inv;

assign add_ln86_fu_442_p2 = (c_0_reg_224 + zext_ln76_fu_385_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign c_aux_fu_379_p2 = (c_aux_0_reg_236 + 3'd1);

assign c_fu_448_p2 = (c_0_reg_224 + 11'd4);

assign grp_fu_286_p1 = ((trunc_ln77_fu_411_p1[0:0] === 1'b1) ? IM_vec_128_d_1_reg_620 : IM_vec_128_d_0_reg_615);

assign i_fu_493_p2 = (i_0_reg_247 + 9'd1);

assign icmp_ln68_fu_373_p2 = ((c_aux_0_reg_236 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_487_p2 = ((i_0_reg_247 == 9'd480) ? 1'b1 : 1'b0);

assign ind1_fu_335_p2 = (trunc_ln42_fu_331_p1 | 10'd1);

assign ind2_fu_352_p2 = (trunc_ln42_reg_519 | 10'd2);

assign ind3_fu_357_p2 = (trunc_ln42_reg_519 | 10'd3);

assign lut_reorder_I_address0 = zext_ln97_fu_499_p1;

assign lut_reorder_J_address0 = zext_ln97_fu_499_p1;

assign select_ln77_1_fu_422_p3 = ((trunc_ln77_fu_411_p1[0:0] === 1'b1) ? reg_296 : RE_vec_128_c_0_reg_580);

assign select_ln77_fu_415_p3 = ((trunc_ln77_fu_411_p1[0:0] === 1'b1) ? RE_vec_128_d_1_reg_570 : RE_vec_128_d_0_reg_595);

assign select_ln83_1_fu_436_p3 = ((trunc_ln77_fu_411_p1[0:0] === 1'b1) ? IM_vec_128_c_1_reg_610 : IM_vec_128_c_0_reg_605);

assign tmp_11_fu_393_p5 = c_aux_0_reg_236[1:0];

assign tmp_14_fu_323_p3 = c_0_reg_224[32'd10];

assign trunc_ln42_fu_331_p1 = c_0_reg_224[9:0];

assign trunc_ln76_fu_389_p1 = c_aux_0_reg_236[1:0];

assign trunc_ln77_fu_411_p1 = c_aux_0_reg_236[0:0];

assign zext_ln100_fu_505_p1 = lut_reorder_I_q0;

assign zext_ln102_fu_511_p1 = indexJ_reg_725;

assign zext_ln50_fu_341_p1 = c_0_reg_224;

assign zext_ln51_fu_362_p1 = ind2_fu_352_p2;

assign zext_ln52_fu_346_p1 = ind1_fu_335_p2;

assign zext_ln54_fu_367_p1 = ind3_fu_357_p2;

assign zext_ln76_fu_385_p1 = c_aux_0_reg_236;

assign zext_ln86_fu_482_p1 = add_ln86_reg_667;

assign zext_ln97_fu_499_p1 = i_0_reg_247;

always @ (posedge ap_clk) begin
    zext_ln50_reg_525[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    Real_addr_2_reg_535[0] <= 1'b1;
    Imag_addr_reg_540[0] <= 1'b1;
    zext_ln51_reg_545[1] <= 1'b1;
    zext_ln51_reg_545[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    Real_addr_3_reg_555[1:0] <= 2'b11;
    Imag_addr_1_reg_560[1:0] <= 2'b11;
end

endmodule //Reorder_fft
