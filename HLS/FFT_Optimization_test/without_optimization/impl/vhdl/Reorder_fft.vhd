-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.3
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Reorder_fft is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    Real_r_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    Real_r_EN_A : OUT STD_LOGIC;
    Real_r_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    Real_r_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    Real_r_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    Real_r_Clk_A : OUT STD_LOGIC;
    Real_r_Rst_A : OUT STD_LOGIC;
    Imag_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    Imag_EN_A : OUT STD_LOGIC;
    Imag_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    Imag_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    Imag_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    Imag_Clk_A : OUT STD_LOGIC;
    Imag_Rst_A : OUT STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Reorder_fft is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Reorder_fft,hls_ip_2019_1_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.660000,HLS_SYN_LAT=23906,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=20,HLS_SYN_FF=2326,HLS_SYN_LUT=3606,HLS_VERSION=2019_1_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (31 downto 0) := "00000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (31 downto 0) := "00000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (31 downto 0) := "00010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (31 downto 0) := "00100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv9_1E0 : STD_LOGIC_VECTOR (8 downto 0) := "111100000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal lut_reorder_I_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal lut_reorder_I_ce0 : STD_LOGIC;
    signal lut_reorder_I_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal lut_reorder_J_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal lut_reorder_J_ce0 : STD_LOGIC;
    signal lut_reorder_J_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal reg_290 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal reg_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_301 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_278_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_306 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_258_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_311 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_262_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_317 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln42_fu_331_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln42_reg_519 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_14_fu_323_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln50_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_reg_525 : STD_LOGIC_VECTOR (63 downto 0);
    signal Real_addr_2_reg_535 : STD_LOGIC_VECTOR (9 downto 0);
    signal Imag_addr_reg_540 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln51_fu_362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_reg_545 : STD_LOGIC_VECTOR (63 downto 0);
    signal Real_addr_3_reg_555 : STD_LOGIC_VECTOR (9 downto 0);
    signal Imag_addr_1_reg_560 : STD_LOGIC_VECTOR (9 downto 0);
    signal RE_vec_128_b_reg_565 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal RE_vec_128_d_1_reg_570 : STD_LOGIC_VECTOR (31 downto 0);
    signal RE_vec_128_c_0_reg_580 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal IM_vec_128_a_reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal RE_vec_128_d_0_reg_595 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal IM_vec_128_b_reg_600 : STD_LOGIC_VECTOR (31 downto 0);
    signal IM_vec_128_c_0_reg_605 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal IM_vec_128_c_1_reg_610 : STD_LOGIC_VECTOR (31 downto 0);
    signal IM_vec_128_d_0_reg_615 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal IM_vec_128_d_1_reg_620 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_aux_fu_379_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_aux_reg_628 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln76_fu_389_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln76_reg_633 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln68_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_393_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln77_fu_415_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln77_1_fu_422_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln77_1_reg_652 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln83_1_fu_436_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln83_1_reg_662 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln86_fu_442_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln86_reg_667 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_fu_448_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_282_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_677 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_286_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_682 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_266_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_687 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_692 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_454_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_13_fu_468_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_493_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_710 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal icmp_ln93_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indexJ_reg_725 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal Real_addr_4_reg_730 : STD_LOGIC_VECTOR (9 downto 0);
    signal Imag_addr_4_reg_735 : STD_LOGIC_VECTOR (9 downto 0);
    signal Real_addr_5_reg_740 : STD_LOGIC_VECTOR (9 downto 0);
    signal Imag_addr_5_reg_745 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_0_reg_224 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_aux_0_reg_236 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal i_0_reg_247 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal zext_ln52_fu_346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln86_fu_482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln97_fu_499_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln100_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_fu_511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal Real_r_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal Imag_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_258_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_262_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_274_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_278_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_278_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_286_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ind1_fu_335_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ind2_fu_352_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ind3_fu_357_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_393_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln77_fu_411_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln76_fu_385_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (31 downto 0);

    component Reorder_fft_fadd_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Reorder_fft_fmul_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Reorder_fft_mux_4fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Reorder_fft_lut_rbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component Reorder_fft_lut_rcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component Reorder_fft_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    lut_reorder_I_U : component Reorder_fft_lut_rbkb
    generic map (
        DataWidth => 10,
        AddressRange => 480,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lut_reorder_I_address0,
        ce0 => lut_reorder_I_ce0,
        q0 => lut_reorder_I_q0);

    lut_reorder_J_U : component Reorder_fft_lut_rcud
    generic map (
        DataWidth => 10,
        AddressRange => 480,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lut_reorder_J_address0,
        ce0 => lut_reorder_J_ce0,
        q0 => lut_reorder_J_q0);

    Reorder_fft_AXILiteS_s_axi_U : component Reorder_fft_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    Reorder_fft_fadd_dEe_U1 : component Reorder_fft_fadd_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_301,
        din1 => grp_fu_258_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_258_p2);

    Reorder_fft_fadd_dEe_U2 : component Reorder_fft_fadd_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_306,
        din1 => grp_fu_262_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_262_p2);

    Reorder_fft_fadd_dEe_U3 : component Reorder_fft_fadd_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_6_reg_677,
        din1 => IM_vec_128_a_reg_585,
        ce => ap_const_logic_1,
        dout => grp_fu_266_p2);

    Reorder_fft_fadd_dEe_U4 : component Reorder_fft_fadd_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_8_reg_682,
        din1 => select_ln83_1_reg_662,
        ce => ap_const_logic_1,
        dout => grp_fu_270_p2);

    Reorder_fft_fmul_eOg_U5 : component Reorder_fft_fmul_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_274_p0,
        din1 => grp_fu_274_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_274_p2);

    Reorder_fft_fmul_eOg_U6 : component Reorder_fft_fmul_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_278_p0,
        din1 => grp_fu_278_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_278_p2);

    Reorder_fft_fmul_eOg_U7 : component Reorder_fft_fmul_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_11_fu_393_p6,
        din1 => IM_vec_128_b_reg_600,
        ce => ap_const_logic_1,
        dout => grp_fu_282_p2);

    Reorder_fft_fmul_eOg_U8 : component Reorder_fft_fmul_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_11_fu_393_p6,
        din1 => grp_fu_286_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_286_p2);

    Reorder_fft_mux_4fYi_U9 : component Reorder_fft_mux_4fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3F800000,
        din1 => ap_const_lv32_BF800000,
        din2 => ap_const_lv32_3F800000,
        din3 => ap_const_lv32_BF800000,
        din4 => tmp_11_fu_393_p5,
        dout => tmp_11_fu_393_p6);

    Reorder_fft_mux_4fYi_U10 : component Reorder_fft_mux_4fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3F800000,
        din1 => ap_const_lv32_3F800000,
        din2 => ap_const_lv32_BF800000,
        din3 => ap_const_lv32_BF800000,
        din4 => trunc_ln76_reg_633,
        dout => tmp_12_fu_454_p6);

    Reorder_fft_mux_4fYi_U11 : component Reorder_fft_mux_4fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3F800000,
        din1 => ap_const_lv32_BF800000,
        din2 => ap_const_lv32_BF800000,
        din3 => ap_const_lv32_3F800000,
        din4 => trunc_ln76_reg_633,
        dout => tmp_13_fu_468_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                c_0_reg_224 <= c_fu_448_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_224 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    c_aux_0_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                c_aux_0_reg_236 <= c_aux_reg_628;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                c_aux_0_reg_236 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_14_fu_323_p3 = ap_const_lv1_1))) then 
                i_0_reg_247 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                i_0_reg_247 <= i_reg_710;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                IM_vec_128_a_reg_585 <= Imag_Dout_A;
                RE_vec_128_c_0_reg_580 <= Real_r_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                IM_vec_128_b_reg_600 <= Imag_Dout_A;
                RE_vec_128_d_0_reg_595 <= Real_r_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                IM_vec_128_c_0_reg_605 <= Imag_Dout_A;
                IM_vec_128_c_1_reg_610 <= Real_r_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                IM_vec_128_d_0_reg_615 <= Imag_Dout_A;
                IM_vec_128_d_1_reg_620 <= Real_r_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    Imag_addr_1_reg_560(9 downto 2) <= zext_ln54_fu_367_p1(10 - 1 downto 0)(9 downto 2);
                    Real_addr_3_reg_555(9 downto 2) <= zext_ln54_fu_367_p1(10 - 1 downto 0)(9 downto 2);
                    zext_ln51_reg_545(0) <= zext_ln51_fu_362_p1(0);    zext_ln51_reg_545(9 downto 2) <= zext_ln51_fu_362_p1(9 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                Imag_addr_4_reg_735 <= zext_ln100_fu_505_p1(10 - 1 downto 0);
                Real_addr_4_reg_730 <= zext_ln100_fu_505_p1(10 - 1 downto 0);
                indexJ_reg_725 <= lut_reorder_J_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                Imag_addr_5_reg_745 <= zext_ln102_fu_511_p1(10 - 1 downto 0);
                Real_addr_5_reg_740 <= zext_ln102_fu_511_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_14_fu_323_p3 = ap_const_lv1_0))) then
                    Imag_addr_reg_540(9 downto 1) <= zext_ln52_fu_346_p1(10 - 1 downto 0)(9 downto 1);
                    Real_addr_2_reg_535(9 downto 1) <= zext_ln52_fu_346_p1(10 - 1 downto 0)(9 downto 1);
                trunc_ln42_reg_519 <= trunc_ln42_fu_331_p1;
                    zext_ln50_reg_525(10 downto 0) <= zext_ln50_fu_341_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                RE_vec_128_b_reg_565 <= Real_r_Dout_A;
                RE_vec_128_d_1_reg_570 <= Imag_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln68_fu_373_p2 = ap_const_lv1_0))) then
                add_ln86_reg_667 <= add_ln86_fu_442_p2;
                select_ln77_1_reg_652 <= select_ln77_1_fu_422_p3;
                select_ln83_1_reg_662 <= select_ln83_1_fu_436_p3;
                trunc_ln76_reg_633 <= trunc_ln76_fu_389_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                c_aux_reg_628 <= c_aux_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                i_reg_710 <= i_fu_493_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_290 <= Real_r_Dout_A;
                reg_296 <= Imag_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_301 <= grp_fu_274_p2;
                reg_306 <= grp_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state17))) then
                reg_311 <= grp_fu_258_p2;
                reg_317 <= grp_fu_262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_6_reg_677 <= grp_fu_282_p2;
                tmp_8_reg_682 <= grp_fu_286_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_7_reg_687 <= grp_fu_266_p2;
                tmp_9_reg_692 <= grp_fu_270_p2;
            end if;
        end if;
    end process;
    zext_ln50_reg_525(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    Real_addr_2_reg_535(0) <= '1';
    Imag_addr_reg_540(0) <= '1';
    zext_ln51_reg_545(1) <= '1';
    zext_ln51_reg_545(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    Real_addr_3_reg_555(1 downto 0) <= "11";
    Imag_addr_1_reg_560(1 downto 0) <= "11";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_14_fu_323_p3, ap_CS_fsm_state9, icmp_ln68_fu_373_p2, ap_CS_fsm_state28, icmp_ln93_fu_487_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_14_fu_323_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln68_fu_373_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state28 => 
                if (((icmp_ln93_fu_487_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Imag_Addr_A <= std_logic_vector(shift_left(unsigned(Imag_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    Imag_Addr_A_orig_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state30, ap_CS_fsm_state2, zext_ln50_reg_525, Imag_addr_reg_540, zext_ln51_reg_545, Imag_addr_1_reg_560, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state29, Imag_addr_4_reg_735, Imag_addr_5_reg_745, ap_CS_fsm_state27, ap_CS_fsm_state32, zext_ln52_fu_346_p1, zext_ln54_fu_367_p1, zext_ln86_fu_482_p1, zext_ln100_fu_505_p1, zext_ln102_fu_511_p1, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            Imag_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Imag_addr_5_reg_745),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            Imag_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Imag_addr_4_reg_735),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            Imag_Addr_A_orig <= zext_ln102_fu_511_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            Imag_Addr_A_orig <= zext_ln100_fu_505_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            Imag_Addr_A_orig <= zext_ln86_fu_482_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Imag_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Imag_addr_1_reg_560),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Imag_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Imag_addr_reg_540),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Imag_Addr_A_orig <= zext_ln51_reg_545(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Imag_Addr_A_orig <= zext_ln50_reg_525(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Imag_Addr_A_orig <= zext_ln54_fu_367_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Imag_Addr_A_orig <= zext_ln52_fu_346_p1(32 - 1 downto 0);
        else 
            Imag_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    Imag_Clk_A <= ap_clk;

    Imag_Din_A_assign_proc : process(Imag_Dout_A, reg_296, reg_317, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            Imag_Din_A <= reg_296;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            Imag_Din_A <= Imag_Dout_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            Imag_Din_A <= reg_317;
        else 
            Imag_Din_A <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Imag_EN_A_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state30, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state29, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            Imag_EN_A <= ap_const_logic_1;
        else 
            Imag_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    Imag_Rst_A <= ap_rst_n_inv;

    Imag_WEN_A_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            Imag_WEN_A <= ap_const_lv4_F;
        else 
            Imag_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    Real_r_Addr_A <= std_logic_vector(shift_left(unsigned(Real_r_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    Real_r_Addr_A_orig_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state30, ap_CS_fsm_state2, zext_ln50_fu_341_p1, Real_addr_2_reg_535, zext_ln51_fu_362_p1, Real_addr_3_reg_555, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state29, Real_addr_4_reg_730, Real_addr_5_reg_740, ap_CS_fsm_state27, ap_CS_fsm_state32, zext_ln86_fu_482_p1, zext_ln100_fu_505_p1, zext_ln102_fu_511_p1, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            Real_r_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Real_addr_5_reg_740),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            Real_r_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Real_addr_4_reg_730),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            Real_r_Addr_A_orig <= zext_ln102_fu_511_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            Real_r_Addr_A_orig <= zext_ln100_fu_505_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            Real_r_Addr_A_orig <= zext_ln86_fu_482_p1(32 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            Real_r_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Real_addr_3_reg_555),32));
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            Real_r_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Real_addr_2_reg_535),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Real_r_Addr_A_orig <= zext_ln51_fu_362_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Real_r_Addr_A_orig <= zext_ln50_fu_341_p1(32 - 1 downto 0);
        else 
            Real_r_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    Real_r_Clk_A <= ap_clk;

    Real_r_Din_A_assign_proc : process(Real_r_Dout_A, reg_290, reg_311, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            Real_r_Din_A <= reg_290;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            Real_r_Din_A <= Real_r_Dout_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            Real_r_Din_A <= reg_311;
        else 
            Real_r_Din_A <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Real_r_EN_A_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state30, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state29, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            Real_r_EN_A <= ap_const_logic_1;
        else 
            Real_r_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    Real_r_Rst_A <= ap_rst_n_inv;

    Real_r_WEN_A_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            Real_r_WEN_A <= ap_const_lv4_F;
        else 
            Real_r_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    add_ln86_fu_442_p2 <= std_logic_vector(unsigned(c_0_reg_224) + unsigned(zext_ln76_fu_385_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state28, icmp_ln93_fu_487_p2)
    begin
        if (((icmp_ln93_fu_487_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state28, icmp_ln93_fu_487_p2)
    begin
        if (((icmp_ln93_fu_487_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    c_aux_fu_379_p2 <= std_logic_vector(unsigned(c_aux_0_reg_236) + unsigned(ap_const_lv3_1));
    c_fu_448_p2 <= std_logic_vector(unsigned(c_0_reg_224) + unsigned(ap_const_lv11_4));

    grp_fu_258_p1_assign_proc : process(reg_290, reg_311, ap_CS_fsm_state13, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_258_p1 <= reg_311;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_258_p1 <= reg_290;
        else 
            grp_fu_258_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_262_p1_assign_proc : process(select_ln77_1_reg_652, tmp_7_reg_687, ap_CS_fsm_state13, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_262_p1 <= tmp_7_reg_687;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_262_p1 <= select_ln77_1_reg_652;
        else 
            grp_fu_262_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_274_p0_assign_proc : process(ap_CS_fsm_state9, tmp_11_fu_393_p6, tmp_12_fu_454_p6, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_274_p0 <= tmp_12_fu_454_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_274_p0 <= tmp_11_fu_393_p6;
        else 
            grp_fu_274_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_274_p1_assign_proc : process(reg_317, RE_vec_128_b_reg_565, ap_CS_fsm_state9, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_274_p1 <= reg_317;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_274_p1 <= RE_vec_128_b_reg_565;
        else 
            grp_fu_274_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_278_p0_assign_proc : process(ap_CS_fsm_state9, tmp_11_fu_393_p6, ap_CS_fsm_state18, tmp_13_fu_468_p6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_278_p0 <= tmp_13_fu_468_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_278_p0 <= tmp_11_fu_393_p6;
        else 
            grp_fu_278_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_278_p1_assign_proc : process(ap_CS_fsm_state9, select_ln77_fu_415_p3, tmp_9_reg_692, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_278_p1 <= tmp_9_reg_692;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_278_p1 <= select_ln77_fu_415_p3;
        else 
            grp_fu_278_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_286_p1 <= 
        IM_vec_128_d_1_reg_620 when (trunc_ln77_fu_411_p1(0) = '1') else 
        IM_vec_128_d_0_reg_615;
    i_fu_493_p2 <= std_logic_vector(unsigned(i_0_reg_247) + unsigned(ap_const_lv9_1));
    icmp_ln68_fu_373_p2 <= "1" when (c_aux_0_reg_236 = ap_const_lv3_4) else "0";
    icmp_ln93_fu_487_p2 <= "1" when (i_0_reg_247 = ap_const_lv9_1E0) else "0";
    ind1_fu_335_p2 <= (trunc_ln42_fu_331_p1 or ap_const_lv10_1);
    ind2_fu_352_p2 <= (trunc_ln42_reg_519 or ap_const_lv10_2);
    ind3_fu_357_p2 <= (trunc_ln42_reg_519 or ap_const_lv10_3);
    lut_reorder_I_address0 <= zext_ln97_fu_499_p1(9 - 1 downto 0);

    lut_reorder_I_ce0_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            lut_reorder_I_ce0 <= ap_const_logic_1;
        else 
            lut_reorder_I_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_reorder_J_address0 <= zext_ln97_fu_499_p1(9 - 1 downto 0);

    lut_reorder_J_ce0_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            lut_reorder_J_ce0 <= ap_const_logic_1;
        else 
            lut_reorder_J_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln77_1_fu_422_p3 <= 
        reg_296 when (trunc_ln77_fu_411_p1(0) = '1') else 
        RE_vec_128_c_0_reg_580;
    select_ln77_fu_415_p3 <= 
        RE_vec_128_d_1_reg_570 when (trunc_ln77_fu_411_p1(0) = '1') else 
        RE_vec_128_d_0_reg_595;
    select_ln83_1_fu_436_p3 <= 
        IM_vec_128_c_1_reg_610 when (trunc_ln77_fu_411_p1(0) = '1') else 
        IM_vec_128_c_0_reg_605;
    tmp_11_fu_393_p5 <= c_aux_0_reg_236(2 - 1 downto 0);
    tmp_14_fu_323_p3 <= c_0_reg_224(10 downto 10);
    trunc_ln42_fu_331_p1 <= c_0_reg_224(10 - 1 downto 0);
    trunc_ln76_fu_389_p1 <= c_aux_0_reg_236(2 - 1 downto 0);
    trunc_ln77_fu_411_p1 <= c_aux_0_reg_236(1 - 1 downto 0);
    zext_ln100_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut_reorder_I_q0),64));
    zext_ln102_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indexJ_reg_725),64));
    zext_ln50_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_224),64));
    zext_ln51_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ind2_fu_352_p2),64));
    zext_ln52_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ind1_fu_335_p2),64));
    zext_ln54_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ind3_fu_357_p2),64));
    zext_ln76_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_aux_0_reg_236),11));
    zext_ln86_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln86_reg_667),64));
    zext_ln97_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_247),64));
end behav;
