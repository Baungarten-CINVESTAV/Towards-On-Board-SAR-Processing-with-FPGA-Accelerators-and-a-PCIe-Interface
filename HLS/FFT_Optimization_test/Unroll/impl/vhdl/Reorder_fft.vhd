-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.3
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Reorder_fft is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    Real_r_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    Real_r_EN_A : OUT STD_LOGIC;
    Real_r_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    Real_r_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    Real_r_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    Real_r_Clk_A : OUT STD_LOGIC;
    Real_r_Rst_A : OUT STD_LOGIC;
    Imag_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    Imag_EN_A : OUT STD_LOGIC;
    Imag_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    Imag_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    Imag_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    Imag_Clk_A : OUT STD_LOGIC;
    Imag_Rst_A : OUT STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Reorder_fft is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Reorder_fft,hls_ip_2019_1_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.660000,HLS_SYN_LAT=23714,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=20,HLS_SYN_FF=2812,HLS_SYN_LUT=5094,HLS_VERSION=2019_1_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (106 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (106 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (106 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (106 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (106 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (106 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (106 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (106 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (106 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (106 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (106 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv10_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000000101";
    constant ap_const_lv10_6 : STD_LOGIC_VECTOR (9 downto 0) := "0000000110";
    constant ap_const_lv10_7 : STD_LOGIC_VECTOR (9 downto 0) := "0000000111";
    constant ap_const_lv10_8 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_const_lv10_9 : STD_LOGIC_VECTOR (9 downto 0) := "0000001001";
    constant ap_const_lv10_A : STD_LOGIC_VECTOR (9 downto 0) := "0000001010";
    constant ap_const_lv10_B : STD_LOGIC_VECTOR (9 downto 0) := "0000001011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_C : STD_LOGIC_VECTOR (9 downto 0) := "0000001100";
    constant ap_const_lv10_D : STD_LOGIC_VECTOR (9 downto 0) := "0000001101";
    constant ap_const_lv10_E : STD_LOGIC_VECTOR (9 downto 0) := "0000001110";
    constant ap_const_lv10_F : STD_LOGIC_VECTOR (9 downto 0) := "0000001111";
    constant ap_const_lv11_10 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_const_lv9_1E0 : STD_LOGIC_VECTOR (8 downto 0) := "111100000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal lut_reorder_I_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal lut_reorder_I_ce0 : STD_LOGIC;
    signal lut_reorder_I_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal lut_reorder_J_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal lut_reorder_J_ce0 : STD_LOGIC;
    signal lut_reorder_J_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal reg_597 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal reg_603 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_608 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal reg_613 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_617 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal reg_621 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_626 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal reg_630 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_635 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal reg_639 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_643 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal reg_647 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_581_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_651 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal grp_fu_585_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_656 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_589_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_661 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_593_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_666 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_565_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_671 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal grp_fu_569_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_677 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_573_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_683 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_577_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_688 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_19_fu_701_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_19_reg_1387 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_32_fu_693_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln49_fu_711_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_reg_1405 : STD_LOGIC_VECTOR (63 downto 0);
    signal Real_addr_2_reg_1415 : STD_LOGIC_VECTOR (9 downto 0);
    signal Imag_addr_reg_1420 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln50_fu_732_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_reg_1425 : STD_LOGIC_VECTOR (63 downto 0);
    signal Real_addr_3_reg_1435 : STD_LOGIC_VECTOR (9 downto 0);
    signal Imag_addr_1_reg_1440 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_fu_749_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln67_reg_1458 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln75_fu_755_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln75_reg_1463 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln67_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_759_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln76_fu_781_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln76_1_fu_790_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln76_1_reg_1482 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln82_fu_798_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln82_1_fu_807_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln82_1_reg_1492 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln43_fu_815_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln43_reg_1497 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln49_1_fu_825_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_1_reg_1502 : STD_LOGIC_VECTOR (63 downto 0);
    signal Real_addr_8_reg_1512 : STD_LOGIC_VECTOR (9 downto 0);
    signal Imag_addr_6_reg_1517 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_836_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_15_fu_850_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln50_1_fu_898_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_1_reg_1532 : STD_LOGIC_VECTOR (63 downto 0);
    signal Real_addr_9_reg_1542 : STD_LOGIC_VECTOR (9 downto 0);
    signal Imag_addr_7_reg_1547 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln49_4_fu_909_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln49_4_reg_1562 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln67_1_fu_918_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln67_1_reg_1570 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal trunc_ln75_1_fu_928_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln75_1_reg_1575 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln67_1_fu_912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_932_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln76_2_fu_954_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln76_3_fu_963_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln76_3_reg_1594 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln82_2_fu_971_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln82_3_fu_980_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln82_3_reg_1604 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln85_fu_988_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln85_reg_1609 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln43_1_fu_993_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln43_1_reg_1614 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln49_2_fu_1003_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_2_reg_1619 : STD_LOGIC_VECTOR (63 downto 0);
    signal Real_addr_13_reg_1629 : STD_LOGIC_VECTOR (9 downto 0);
    signal Imag_addr_11_reg_1634 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_21_fu_1014_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal tmp_22_fu_1028_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln50_2_fu_1057_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_2_reg_1649 : STD_LOGIC_VECTOR (63 downto 0);
    signal Real_addr_14_reg_1659 : STD_LOGIC_VECTOR (9 downto 0);
    signal Imag_addr_12_reg_1664 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67_2_fu_1074_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln67_2_reg_1682 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal trunc_ln75_2_fu_1080_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln75_2_reg_1687 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln67_2_fu_1068_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_1084_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln76_4_fu_1106_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln76_5_fu_1115_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln76_5_reg_1706 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln82_4_fu_1123_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln82_5_fu_1132_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln82_5_reg_1716 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_reg_1721 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln43_2_fu_1149_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln43_2_reg_1726 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln49_3_fu_1159_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_3_reg_1731 : STD_LOGIC_VECTOR (63 downto 0);
    signal Real_addr_18_reg_1741 : STD_LOGIC_VECTOR (9 downto 0);
    signal Imag_addr_16_reg_1746 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_25_fu_1170_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal tmp_26_fu_1184_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln50_3_fu_1221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_3_reg_1761 : STD_LOGIC_VECTOR (63 downto 0);
    signal Real_addr_19_reg_1771 : STD_LOGIC_VECTOR (9 downto 0);
    signal Imag_addr_17_reg_1776 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln49_5_fu_1232_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln49_5_reg_1791 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln67_3_fu_1241_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln67_3_reg_1799 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal trunc_ln75_3_fu_1251_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln75_3_reg_1804 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln67_3_fu_1235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_1255_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln76_6_fu_1277_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln76_7_fu_1286_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln76_7_reg_1823 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln82_6_fu_1294_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln82_7_fu_1303_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln82_7_reg_1833 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln85_1_fu_1311_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln85_1_reg_1838 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln43_fu_1316_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_30_fu_1322_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal tmp_31_fu_1336_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_1361_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_1861 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal icmp_ln92_fu_1355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indexJ_reg_1876 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal Real_addr_4_reg_1881 : STD_LOGIC_VECTOR (9 downto 0);
    signal Imag_addr_4_reg_1886 : STD_LOGIC_VECTOR (9 downto 0);
    signal Real_addr_5_reg_1891 : STD_LOGIC_VECTOR (9 downto 0);
    signal Imag_addr_5_reg_1896 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_0_0_reg_496 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_aux_0_0_reg_508 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal c_aux_0_1_reg_520 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal c_aux_0_2_reg_531 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal c_aux_0_3_reg_543 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal i_0_reg_554 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal zext_ln51_fu_716_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln53_fu_737_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_1_fu_830_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln85_fu_882_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln53_1_fu_903_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_2_fu_1008_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln85_1_fu_1042_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln53_2_fu_1062_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_3_fu_1164_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln85_2_fu_1205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln53_3_fu_1226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln85_3_fu_1350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln96_fu_1367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln99_fu_1373_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln101_fu_1379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal Real_r_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal Imag_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_565_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal grp_fu_569_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_577_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_581_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_581_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_585_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_585_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_589_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_593_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_593_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln45_fu_705_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln46_fu_722_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln47_fu_727_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_759_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln76_fu_777_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_1_fu_820_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_18_fu_864_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln_fu_874_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln46_1_fu_888_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln47_1_fu_893_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_20_fu_932_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln76_1_fu_950_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln75_fu_924_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln45_2_fu_998_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln46_2_fu_1047_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln47_2_fu_1052_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_23_fu_1084_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln76_2_fu_1102_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_3_fu_1154_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_28_fu_1198_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln46_3_fu_1211_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln47_3_fu_1216_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_29_fu_1255_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln76_3_fu_1273_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln75_1_fu_1247_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (106 downto 0);

    component Reorder_fft_fadd_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Reorder_fft_fmul_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Reorder_fft_mux_4fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Reorder_fft_lut_rbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component Reorder_fft_lut_rcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component Reorder_fft_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    lut_reorder_I_U : component Reorder_fft_lut_rbkb
    generic map (
        DataWidth => 10,
        AddressRange => 480,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lut_reorder_I_address0,
        ce0 => lut_reorder_I_ce0,
        q0 => lut_reorder_I_q0);

    lut_reorder_J_U : component Reorder_fft_lut_rcud
    generic map (
        DataWidth => 10,
        AddressRange => 480,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lut_reorder_J_address0,
        ce0 => lut_reorder_J_ce0,
        q0 => lut_reorder_J_q0);

    Reorder_fft_AXILiteS_s_axi_U : component Reorder_fft_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    Reorder_fft_fadd_dEe_U1 : component Reorder_fft_fadd_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_651,
        din1 => grp_fu_565_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_565_p2);

    Reorder_fft_fadd_dEe_U2 : component Reorder_fft_fadd_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_656,
        din1 => grp_fu_569_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_569_p2);

    Reorder_fft_fadd_dEe_U3 : component Reorder_fft_fadd_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_661,
        din1 => reg_621,
        ce => ap_const_logic_1,
        dout => grp_fu_573_p2);

    Reorder_fft_fadd_dEe_U4 : component Reorder_fft_fadd_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_666,
        din1 => grp_fu_577_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_577_p2);

    Reorder_fft_fmul_eOg_U5 : component Reorder_fft_fmul_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_581_p0,
        din1 => grp_fu_581_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_581_p2);

    Reorder_fft_fmul_eOg_U6 : component Reorder_fft_fmul_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_585_p0,
        din1 => grp_fu_585_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_585_p2);

    Reorder_fft_fmul_eOg_U7 : component Reorder_fft_fmul_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_589_p0,
        din1 => reg_630,
        ce => ap_const_logic_1,
        dout => grp_fu_589_p2);

    Reorder_fft_fmul_eOg_U8 : component Reorder_fft_fmul_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_593_p0,
        din1 => grp_fu_593_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_593_p2);

    Reorder_fft_mux_4fYi_U9 : component Reorder_fft_mux_4fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3F800000,
        din1 => ap_const_lv32_BF800000,
        din2 => ap_const_lv32_3F800000,
        din3 => ap_const_lv32_BF800000,
        din4 => tmp_2_fu_759_p5,
        dout => tmp_2_fu_759_p6);

    Reorder_fft_mux_4fYi_U10 : component Reorder_fft_mux_4fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3F800000,
        din1 => ap_const_lv32_3F800000,
        din2 => ap_const_lv32_BF800000,
        din3 => ap_const_lv32_BF800000,
        din4 => trunc_ln75_reg_1463,
        dout => tmp_11_fu_836_p6);

    Reorder_fft_mux_4fYi_U11 : component Reorder_fft_mux_4fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3F800000,
        din1 => ap_const_lv32_BF800000,
        din2 => ap_const_lv32_BF800000,
        din3 => ap_const_lv32_3F800000,
        din4 => trunc_ln75_reg_1463,
        dout => tmp_15_fu_850_p6);

    Reorder_fft_mux_4fYi_U12 : component Reorder_fft_mux_4fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3F800000,
        din1 => ap_const_lv32_BF800000,
        din2 => ap_const_lv32_3F800000,
        din3 => ap_const_lv32_BF800000,
        din4 => tmp_20_fu_932_p5,
        dout => tmp_20_fu_932_p6);

    Reorder_fft_mux_4fYi_U13 : component Reorder_fft_mux_4fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3F800000,
        din1 => ap_const_lv32_3F800000,
        din2 => ap_const_lv32_BF800000,
        din3 => ap_const_lv32_BF800000,
        din4 => trunc_ln75_1_reg_1575,
        dout => tmp_21_fu_1014_p6);

    Reorder_fft_mux_4fYi_U14 : component Reorder_fft_mux_4fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3F800000,
        din1 => ap_const_lv32_BF800000,
        din2 => ap_const_lv32_BF800000,
        din3 => ap_const_lv32_3F800000,
        din4 => trunc_ln75_1_reg_1575,
        dout => tmp_22_fu_1028_p6);

    Reorder_fft_mux_4fYi_U15 : component Reorder_fft_mux_4fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3F800000,
        din1 => ap_const_lv32_BF800000,
        din2 => ap_const_lv32_3F800000,
        din3 => ap_const_lv32_BF800000,
        din4 => tmp_23_fu_1084_p5,
        dout => tmp_23_fu_1084_p6);

    Reorder_fft_mux_4fYi_U16 : component Reorder_fft_mux_4fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3F800000,
        din1 => ap_const_lv32_3F800000,
        din2 => ap_const_lv32_BF800000,
        din3 => ap_const_lv32_BF800000,
        din4 => trunc_ln75_2_reg_1687,
        dout => tmp_25_fu_1170_p6);

    Reorder_fft_mux_4fYi_U17 : component Reorder_fft_mux_4fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3F800000,
        din1 => ap_const_lv32_BF800000,
        din2 => ap_const_lv32_BF800000,
        din3 => ap_const_lv32_3F800000,
        din4 => trunc_ln75_2_reg_1687,
        dout => tmp_26_fu_1184_p6);

    Reorder_fft_mux_4fYi_U18 : component Reorder_fft_mux_4fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3F800000,
        din1 => ap_const_lv32_BF800000,
        din2 => ap_const_lv32_3F800000,
        din3 => ap_const_lv32_BF800000,
        din4 => tmp_29_fu_1255_p5,
        dout => tmp_29_fu_1255_p6);

    Reorder_fft_mux_4fYi_U19 : component Reorder_fft_mux_4fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3F800000,
        din1 => ap_const_lv32_3F800000,
        din2 => ap_const_lv32_BF800000,
        din3 => ap_const_lv32_BF800000,
        din4 => trunc_ln75_3_reg_1804,
        dout => tmp_30_fu_1322_p6);

    Reorder_fft_mux_4fYi_U20 : component Reorder_fft_mux_4fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3F800000,
        din1 => ap_const_lv32_BF800000,
        din2 => ap_const_lv32_BF800000,
        din3 => ap_const_lv32_3F800000,
        din4 => trunc_ln75_3_reg_1804,
        dout => tmp_31_fu_1336_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_0_reg_496_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_3_fu_1235_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then 
                c_0_0_reg_496 <= add_ln43_fu_1316_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_0_reg_496 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    c_aux_0_0_reg_508_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                c_aux_0_0_reg_508 <= add_ln67_reg_1458;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                c_aux_0_0_reg_508 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    c_aux_0_1_reg_520_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                c_aux_0_1_reg_520 <= add_ln67_1_reg_1570;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                c_aux_0_1_reg_520 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    c_aux_0_2_reg_531_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                c_aux_0_2_reg_531 <= add_ln67_2_reg_1682;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                c_aux_0_2_reg_531 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    c_aux_0_3_reg_543_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
                c_aux_0_3_reg_543 <= add_ln67_3_reg_1799;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
                c_aux_0_3_reg_543 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_reg_554_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_32_fu_693_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_554 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
                i_0_reg_554 <= i_reg_1861;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_1_fu_912_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    Imag_addr_11_reg_1634(2 downto 1) <= zext_ln51_2_fu_1008_p1(10 - 1 downto 0)(2 downto 1);    Imag_addr_11_reg_1634(9 downto 4) <= zext_ln51_2_fu_1008_p1(10 - 1 downto 0)(9 downto 4);
                    Real_addr_13_reg_1629(2 downto 1) <= zext_ln51_2_fu_1008_p1(10 - 1 downto 0)(2 downto 1);    Real_addr_13_reg_1629(9 downto 4) <= zext_ln51_2_fu_1008_p1(10 - 1 downto 0)(9 downto 4);
                    or_ln43_1_reg_1614(2 downto 0) <= or_ln43_1_fu_993_p2(2 downto 0);    or_ln43_1_reg_1614(9 downto 4) <= or_ln43_1_fu_993_p2(9 downto 4);
                    zext_ln49_2_reg_1619(2 downto 0) <= zext_ln49_2_fu_1003_p1(2 downto 0);    zext_ln49_2_reg_1619(9 downto 4) <= zext_ln49_2_fu_1003_p1(9 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                    Imag_addr_12_reg_1664(2) <= zext_ln53_2_fu_1062_p1(10 - 1 downto 0)(2);    Imag_addr_12_reg_1664(9 downto 4) <= zext_ln53_2_fu_1062_p1(10 - 1 downto 0)(9 downto 4);
                    Real_addr_14_reg_1659(2) <= zext_ln53_2_fu_1062_p1(10 - 1 downto 0)(2);    Real_addr_14_reg_1659(9 downto 4) <= zext_ln53_2_fu_1062_p1(10 - 1 downto 0)(9 downto 4);
                    zext_ln50_2_reg_1649(0) <= zext_ln50_2_fu_1057_p1(0);    zext_ln50_2_reg_1649(2) <= zext_ln50_2_fu_1057_p1(2);    zext_ln50_2_reg_1649(9 downto 4) <= zext_ln50_2_fu_1057_p1(9 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_2_fu_1068_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    Imag_addr_16_reg_1746(1) <= zext_ln51_3_fu_1164_p1(10 - 1 downto 0)(1);    Imag_addr_16_reg_1746(9 downto 4) <= zext_ln51_3_fu_1164_p1(10 - 1 downto 0)(9 downto 4);
                    Real_addr_18_reg_1741(1) <= zext_ln51_3_fu_1164_p1(10 - 1 downto 0)(1);    Real_addr_18_reg_1741(9 downto 4) <= zext_ln51_3_fu_1164_p1(10 - 1 downto 0)(9 downto 4);
                    or_ln43_2_reg_1726(1 downto 0) <= or_ln43_2_fu_1149_p2(1 downto 0);    or_ln43_2_reg_1726(9 downto 4) <= or_ln43_2_fu_1149_p2(9 downto 4);
                    zext_ln49_3_reg_1731(1 downto 0) <= zext_ln49_3_fu_1159_p1(1 downto 0);    zext_ln49_3_reg_1731(9 downto 4) <= zext_ln49_3_fu_1159_p1(9 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                    Imag_addr_17_reg_1776(9 downto 4) <= zext_ln53_3_fu_1226_p1(10 - 1 downto 0)(9 downto 4);
                    Real_addr_19_reg_1771(9 downto 4) <= zext_ln53_3_fu_1226_p1(10 - 1 downto 0)(9 downto 4);
                    zext_ln50_3_reg_1761(0) <= zext_ln50_3_fu_1221_p1(0);    zext_ln50_3_reg_1761(9 downto 4) <= zext_ln50_3_fu_1221_p1(9 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    Imag_addr_1_reg_1440(9 downto 2) <= zext_ln53_fu_737_p1(10 - 1 downto 0)(9 downto 2);
                    Real_addr_3_reg_1435(9 downto 2) <= zext_ln53_fu_737_p1(10 - 1 downto 0)(9 downto 2);
                    zext_ln50_reg_1425(0) <= zext_ln50_fu_732_p1(0);    zext_ln50_reg_1425(9 downto 2) <= zext_ln50_fu_732_p1(9 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state104)) then
                Imag_addr_4_reg_1886 <= zext_ln99_fu_1373_p1(10 - 1 downto 0);
                Real_addr_4_reg_1881 <= zext_ln99_fu_1373_p1(10 - 1 downto 0);
                indexJ_reg_1876 <= lut_reorder_J_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state105)) then
                Imag_addr_5_reg_1896 <= zext_ln101_fu_1379_p1(10 - 1 downto 0);
                Real_addr_5_reg_1891 <= zext_ln101_fu_1379_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_fu_743_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    Imag_addr_6_reg_1517(1) <= zext_ln51_1_fu_830_p1(10 - 1 downto 0)(1);    Imag_addr_6_reg_1517(9 downto 3) <= zext_ln51_1_fu_830_p1(10 - 1 downto 0)(9 downto 3);
                    Real_addr_8_reg_1512(1) <= zext_ln51_1_fu_830_p1(10 - 1 downto 0)(1);    Real_addr_8_reg_1512(9 downto 3) <= zext_ln51_1_fu_830_p1(10 - 1 downto 0)(9 downto 3);
                    or_ln43_reg_1497(1 downto 0) <= or_ln43_fu_815_p2(1 downto 0);    or_ln43_reg_1497(9 downto 3) <= or_ln43_fu_815_p2(9 downto 3);
                    zext_ln49_1_reg_1502(1 downto 0) <= zext_ln49_1_fu_825_p1(1 downto 0);    zext_ln49_1_reg_1502(9 downto 3) <= zext_ln49_1_fu_825_p1(9 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                    Imag_addr_7_reg_1547(9 downto 3) <= zext_ln53_1_fu_903_p1(10 - 1 downto 0)(9 downto 3);
                    Real_addr_9_reg_1542(9 downto 3) <= zext_ln53_1_fu_903_p1(10 - 1 downto 0)(9 downto 3);
                    zext_ln50_1_reg_1532(0) <= zext_ln50_1_fu_898_p1(0);    zext_ln50_1_reg_1532(9 downto 3) <= zext_ln50_1_fu_898_p1(9 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_32_fu_693_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    Imag_addr_reg_1420(9 downto 1) <= zext_ln51_fu_716_p1(10 - 1 downto 0)(9 downto 1);
                    Real_addr_2_reg_1415(9 downto 1) <= zext_ln51_fu_716_p1(10 - 1 downto 0)(9 downto 1);
                empty_19_reg_1387 <= empty_19_fu_701_p1;
                    zext_ln49_reg_1405(10 downto 0) <= zext_ln49_fu_711_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                add_ln67_1_reg_1570 <= add_ln67_1_fu_918_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                add_ln67_2_reg_1682 <= add_ln67_2_fu_1074_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then
                add_ln67_3_reg_1799 <= add_ln67_3_fu_1241_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln67_reg_1458 <= add_ln67_fu_749_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_3_fu_1235_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state84))) then
                add_ln85_1_reg_1838 <= add_ln85_1_fu_1311_p2;
                select_ln76_7_reg_1823 <= select_ln76_7_fu_1286_p3;
                select_ln82_7_reg_1833 <= select_ln82_7_fu_1303_p3;
                trunc_ln75_3_reg_1804 <= trunc_ln75_3_fu_1251_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_1_fu_912_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                add_ln85_reg_1609 <= add_ln85_fu_988_p2;
                select_ln76_3_reg_1594 <= select_ln76_3_fu_963_p3;
                select_ln82_3_reg_1604 <= select_ln82_3_fu_980_p3;
                trunc_ln75_1_reg_1575 <= trunc_ln75_1_fu_928_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state103)) then
                i_reg_1861 <= i_fu_1361_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_597 <= Real_r_Dout_A;
                reg_603 <= Imag_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_608 <= Real_r_Dout_A;
                reg_613 <= Imag_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_617 <= Real_r_Dout_A;
                reg_621 <= Imag_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_626 <= Real_r_Dout_A;
                reg_630 <= Imag_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_635 <= Imag_Dout_A;
                reg_639 <= Real_r_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_643 <= Imag_Dout_A;
                reg_647 <= Real_r_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_651 <= grp_fu_581_p2;
                reg_656 <= grp_fu_585_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_661 <= grp_fu_589_p2;
                reg_666 <= grp_fu_593_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state17))) then
                reg_671 <= grp_fu_565_p2;
                reg_677 <= grp_fu_569_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state17))) then
                reg_683 <= grp_fu_573_p2;
                reg_688 <= grp_fu_577_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_fu_743_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                select_ln76_1_reg_1482 <= select_ln76_1_fu_790_p3;
                select_ln82_1_reg_1492 <= select_ln82_1_fu_807_p3;
                trunc_ln75_reg_1463 <= trunc_ln75_fu_755_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_2_fu_1068_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                select_ln76_5_reg_1706 <= select_ln76_5_fu_1115_p3;
                select_ln82_5_reg_1716 <= select_ln82_5_fu_1132_p3;
                tmp_27_reg_1721 <= or_ln43_1_reg_1614(9 downto 3);
                trunc_ln75_2_reg_1687 <= trunc_ln75_2_fu_1080_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                    zext_ln49_4_reg_1562(1 downto 0) <= zext_ln49_4_fu_909_p1(1 downto 0);    zext_ln49_4_reg_1562(9 downto 3) <= zext_ln49_4_fu_909_p1(9 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state83)) then
                    zext_ln49_5_reg_1791(1 downto 0) <= zext_ln49_5_fu_1232_p1(1 downto 0);    zext_ln49_5_reg_1791(9 downto 4) <= zext_ln49_5_fu_1232_p1(9 downto 4);
            end if;
        end if;
    end process;
    zext_ln49_reg_1405(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    Real_addr_2_reg_1415(0) <= '1';
    Imag_addr_reg_1420(0) <= '1';
    zext_ln50_reg_1425(1) <= '1';
    zext_ln50_reg_1425(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    Real_addr_3_reg_1435(1 downto 0) <= "11";
    Imag_addr_1_reg_1440(1 downto 0) <= "11";
    or_ln43_reg_1497(2) <= '1';
    zext_ln49_1_reg_1502(2) <= '1';
    zext_ln49_1_reg_1502(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    Real_addr_8_reg_1512(0) <= '1';
    Real_addr_8_reg_1512(2) <= '1';
    Imag_addr_6_reg_1517(0) <= '1';
    Imag_addr_6_reg_1517(2) <= '1';
    zext_ln50_1_reg_1532(2 downto 1) <= "11";
    zext_ln50_1_reg_1532(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    Real_addr_9_reg_1542(2 downto 0) <= "111";
    Imag_addr_7_reg_1547(2 downto 0) <= "111";
    zext_ln49_4_reg_1562(2) <= '1';
    zext_ln49_4_reg_1562(10) <= '0';
    or_ln43_1_reg_1614(3) <= '1';
    zext_ln49_2_reg_1619(3) <= '1';
    zext_ln49_2_reg_1619(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    Real_addr_13_reg_1629(0) <= '1';
    Real_addr_13_reg_1629(3) <= '1';
    Imag_addr_11_reg_1634(0) <= '1';
    Imag_addr_11_reg_1634(3) <= '1';
    zext_ln50_2_reg_1649(1) <= '1';
    zext_ln50_2_reg_1649(3 downto 3) <= "1";
    zext_ln50_2_reg_1649(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    Real_addr_14_reg_1659(1 downto 0) <= "11";
    Real_addr_14_reg_1659(3) <= '1';
    Imag_addr_12_reg_1664(1 downto 0) <= "11";
    Imag_addr_12_reg_1664(3) <= '1';
    or_ln43_2_reg_1726(3 downto 2) <= "11";
    zext_ln49_3_reg_1731(3 downto 2) <= "11";
    zext_ln49_3_reg_1731(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    Real_addr_18_reg_1741(0) <= '1';
    Real_addr_18_reg_1741(3 downto 2) <= "11";
    Imag_addr_16_reg_1746(0) <= '1';
    Imag_addr_16_reg_1746(3 downto 2) <= "11";
    zext_ln50_3_reg_1761(3 downto 1) <= "111";
    zext_ln50_3_reg_1761(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    Real_addr_19_reg_1771(3 downto 0) <= "1111";
    Imag_addr_17_reg_1776(3 downto 0) <= "1111";
    zext_ln49_5_reg_1791(3 downto 2) <= "11";
    zext_ln49_5_reg_1791(10) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_32_fu_693_p3, ap_CS_fsm_state9, icmp_ln67_fu_743_p2, ap_CS_fsm_state34, icmp_ln67_1_fu_912_p2, ap_CS_fsm_state59, icmp_ln67_2_fu_1068_p2, ap_CS_fsm_state84, icmp_ln67_3_fu_1235_p2, ap_CS_fsm_state103, icmp_ln92_fu_1355_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_32_fu_693_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state103;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln67_fu_743_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((icmp_ln67_1_fu_912_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                if (((icmp_ln67_2_fu_1068_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                if (((icmp_ln67_3_fu_1235_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state85;
                end if;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state103 => 
                if (((icmp_ln92_fu_1355_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state103))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state104;
                end if;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Imag_Addr_A <= std_logic_vector(shift_left(unsigned(Imag_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    Imag_Addr_A_orig_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state28, ap_CS_fsm_state53, ap_CS_fsm_state78, ap_CS_fsm_state105, ap_CS_fsm_state4, ap_CS_fsm_state29, ap_CS_fsm_state54, ap_CS_fsm_state79, ap_CS_fsm_state5, ap_CS_fsm_state30, ap_CS_fsm_state55, ap_CS_fsm_state80, ap_CS_fsm_state6, ap_CS_fsm_state31, ap_CS_fsm_state56, ap_CS_fsm_state81, ap_CS_fsm_state7, ap_CS_fsm_state32, ap_CS_fsm_state57, ap_CS_fsm_state82, ap_CS_fsm_state2, zext_ln49_reg_1405, Imag_addr_reg_1420, zext_ln50_reg_1425, Imag_addr_1_reg_1440, ap_CS_fsm_state9, zext_ln49_1_reg_1502, Imag_addr_6_reg_1517, zext_ln50_1_reg_1532, Imag_addr_7_reg_1547, ap_CS_fsm_state34, zext_ln49_2_reg_1619, Imag_addr_11_reg_1634, zext_ln50_2_reg_1649, Imag_addr_12_reg_1664, ap_CS_fsm_state59, zext_ln49_3_reg_1731, Imag_addr_16_reg_1746, zext_ln50_3_reg_1761, Imag_addr_17_reg_1776, ap_CS_fsm_state104, Imag_addr_4_reg_1886, Imag_addr_5_reg_1896, ap_CS_fsm_state27, ap_CS_fsm_state52, ap_CS_fsm_state77, ap_CS_fsm_state102, ap_CS_fsm_state107, zext_ln51_fu_716_p1, zext_ln53_fu_737_p1, zext_ln51_1_fu_830_p1, zext_ln85_fu_882_p1, zext_ln53_1_fu_903_p1, zext_ln51_2_fu_1008_p1, zext_ln85_1_fu_1042_p1, zext_ln53_2_fu_1062_p1, zext_ln51_3_fu_1164_p1, zext_ln85_2_fu_1205_p1, zext_ln53_3_fu_1226_p1, zext_ln85_3_fu_1350_p1, zext_ln99_fu_1373_p1, zext_ln101_fu_1379_p1, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            Imag_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Imag_addr_5_reg_1896),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            Imag_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Imag_addr_4_reg_1886),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            Imag_Addr_A_orig <= zext_ln101_fu_1379_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            Imag_Addr_A_orig <= zext_ln99_fu_1373_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            Imag_Addr_A_orig <= zext_ln85_3_fu_1350_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            Imag_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Imag_addr_17_reg_1776),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            Imag_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Imag_addr_16_reg_1746),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            Imag_Addr_A_orig <= zext_ln50_3_reg_1761(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            Imag_Addr_A_orig <= zext_ln49_3_reg_1731(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            Imag_Addr_A_orig <= zext_ln53_3_fu_1226_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            Imag_Addr_A_orig <= zext_ln85_2_fu_1205_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            Imag_Addr_A_orig <= zext_ln51_3_fu_1164_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            Imag_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Imag_addr_12_reg_1664),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            Imag_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Imag_addr_11_reg_1634),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            Imag_Addr_A_orig <= zext_ln50_2_reg_1649(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            Imag_Addr_A_orig <= zext_ln49_2_reg_1619(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            Imag_Addr_A_orig <= zext_ln53_2_fu_1062_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            Imag_Addr_A_orig <= zext_ln85_1_fu_1042_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            Imag_Addr_A_orig <= zext_ln51_2_fu_1008_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            Imag_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Imag_addr_7_reg_1547),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            Imag_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Imag_addr_6_reg_1517),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            Imag_Addr_A_orig <= zext_ln50_1_reg_1532(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            Imag_Addr_A_orig <= zext_ln49_1_reg_1502(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            Imag_Addr_A_orig <= zext_ln53_1_fu_903_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            Imag_Addr_A_orig <= zext_ln85_fu_882_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Imag_Addr_A_orig <= zext_ln51_1_fu_830_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Imag_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Imag_addr_1_reg_1440),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Imag_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Imag_addr_reg_1420),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Imag_Addr_A_orig <= zext_ln50_reg_1425(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Imag_Addr_A_orig <= zext_ln49_reg_1405(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Imag_Addr_A_orig <= zext_ln53_fu_737_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Imag_Addr_A_orig <= zext_ln51_fu_716_p1(32 - 1 downto 0);
        else 
            Imag_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    Imag_Clk_A <= ap_clk;

    Imag_Din_A_assign_proc : process(Imag_Dout_A, reg_603, reg_677, ap_CS_fsm_state27, ap_CS_fsm_state52, ap_CS_fsm_state77, ap_CS_fsm_state102, ap_CS_fsm_state107, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            Imag_Din_A <= reg_603;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            Imag_Din_A <= Imag_Dout_A;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            Imag_Din_A <= reg_677;
        else 
            Imag_Din_A <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Imag_EN_A_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state28, ap_CS_fsm_state53, ap_CS_fsm_state78, ap_CS_fsm_state105, ap_CS_fsm_state4, ap_CS_fsm_state29, ap_CS_fsm_state54, ap_CS_fsm_state79, ap_CS_fsm_state5, ap_CS_fsm_state30, ap_CS_fsm_state55, ap_CS_fsm_state80, ap_CS_fsm_state6, ap_CS_fsm_state31, ap_CS_fsm_state56, ap_CS_fsm_state81, ap_CS_fsm_state7, ap_CS_fsm_state32, ap_CS_fsm_state57, ap_CS_fsm_state82, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state34, ap_CS_fsm_state59, ap_CS_fsm_state104, ap_CS_fsm_state27, ap_CS_fsm_state52, ap_CS_fsm_state77, ap_CS_fsm_state102, ap_CS_fsm_state107, ap_CS_fsm_state106)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            Imag_EN_A <= ap_const_logic_1;
        else 
            Imag_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    Imag_Rst_A <= ap_rst_n_inv;

    Imag_WEN_A_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state52, ap_CS_fsm_state77, ap_CS_fsm_state102, ap_CS_fsm_state107, ap_CS_fsm_state106)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            Imag_WEN_A <= ap_const_lv4_F;
        else 
            Imag_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    Real_r_Addr_A <= std_logic_vector(shift_left(unsigned(Real_r_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    Real_r_Addr_A_orig_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state28, ap_CS_fsm_state53, ap_CS_fsm_state78, ap_CS_fsm_state105, ap_CS_fsm_state4, ap_CS_fsm_state29, ap_CS_fsm_state54, ap_CS_fsm_state79, ap_CS_fsm_state5, ap_CS_fsm_state30, ap_CS_fsm_state55, ap_CS_fsm_state80, ap_CS_fsm_state6, ap_CS_fsm_state31, ap_CS_fsm_state56, ap_CS_fsm_state81, ap_CS_fsm_state7, ap_CS_fsm_state32, ap_CS_fsm_state57, ap_CS_fsm_state82, ap_CS_fsm_state2, zext_ln49_fu_711_p1, Real_addr_2_reg_1415, zext_ln50_fu_732_p1, Real_addr_3_reg_1435, ap_CS_fsm_state9, zext_ln49_1_fu_825_p1, Real_addr_8_reg_1512, zext_ln50_1_fu_898_p1, Real_addr_9_reg_1542, ap_CS_fsm_state34, zext_ln49_2_fu_1003_p1, Real_addr_13_reg_1629, zext_ln50_2_fu_1057_p1, Real_addr_14_reg_1659, ap_CS_fsm_state59, zext_ln49_3_fu_1159_p1, Real_addr_18_reg_1741, zext_ln50_3_fu_1221_p1, Real_addr_19_reg_1771, ap_CS_fsm_state104, Real_addr_4_reg_1881, Real_addr_5_reg_1891, ap_CS_fsm_state27, ap_CS_fsm_state52, ap_CS_fsm_state77, ap_CS_fsm_state102, ap_CS_fsm_state107, zext_ln85_fu_882_p1, zext_ln85_1_fu_1042_p1, zext_ln85_2_fu_1205_p1, zext_ln85_3_fu_1350_p1, zext_ln99_fu_1373_p1, zext_ln101_fu_1379_p1, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            Real_r_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Real_addr_5_reg_1891),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            Real_r_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Real_addr_4_reg_1881),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            Real_r_Addr_A_orig <= zext_ln101_fu_1379_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            Real_r_Addr_A_orig <= zext_ln99_fu_1373_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            Real_r_Addr_A_orig <= zext_ln85_3_fu_1350_p1(32 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            Real_r_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Real_addr_19_reg_1771),32));
        elsif (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state79))) then 
            Real_r_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Real_addr_18_reg_1741),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            Real_r_Addr_A_orig <= zext_ln50_3_fu_1221_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            Real_r_Addr_A_orig <= zext_ln85_2_fu_1205_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            Real_r_Addr_A_orig <= zext_ln49_3_fu_1159_p1(32 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            Real_r_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Real_addr_14_reg_1659),32));
        elsif (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state54))) then 
            Real_r_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Real_addr_13_reg_1629),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            Real_r_Addr_A_orig <= zext_ln50_2_fu_1057_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            Real_r_Addr_A_orig <= zext_ln85_1_fu_1042_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            Real_r_Addr_A_orig <= zext_ln49_2_fu_1003_p1(32 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            Real_r_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Real_addr_9_reg_1542),32));
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            Real_r_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Real_addr_8_reg_1512),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            Real_r_Addr_A_orig <= zext_ln50_1_fu_898_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            Real_r_Addr_A_orig <= zext_ln85_fu_882_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Real_r_Addr_A_orig <= zext_ln49_1_fu_825_p1(32 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            Real_r_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Real_addr_3_reg_1435),32));
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            Real_r_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Real_addr_2_reg_1415),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Real_r_Addr_A_orig <= zext_ln50_fu_732_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Real_r_Addr_A_orig <= zext_ln49_fu_711_p1(32 - 1 downto 0);
        else 
            Real_r_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    Real_r_Clk_A <= ap_clk;

    Real_r_Din_A_assign_proc : process(Real_r_Dout_A, reg_597, reg_671, ap_CS_fsm_state27, ap_CS_fsm_state52, ap_CS_fsm_state77, ap_CS_fsm_state102, ap_CS_fsm_state107, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            Real_r_Din_A <= reg_597;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            Real_r_Din_A <= Real_r_Dout_A;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            Real_r_Din_A <= reg_671;
        else 
            Real_r_Din_A <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Real_r_EN_A_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state28, ap_CS_fsm_state53, ap_CS_fsm_state78, ap_CS_fsm_state105, ap_CS_fsm_state4, ap_CS_fsm_state29, ap_CS_fsm_state54, ap_CS_fsm_state79, ap_CS_fsm_state5, ap_CS_fsm_state30, ap_CS_fsm_state55, ap_CS_fsm_state80, ap_CS_fsm_state6, ap_CS_fsm_state31, ap_CS_fsm_state56, ap_CS_fsm_state81, ap_CS_fsm_state7, ap_CS_fsm_state32, ap_CS_fsm_state57, ap_CS_fsm_state82, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state34, ap_CS_fsm_state59, ap_CS_fsm_state104, ap_CS_fsm_state27, ap_CS_fsm_state52, ap_CS_fsm_state77, ap_CS_fsm_state102, ap_CS_fsm_state107, ap_CS_fsm_state106)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            Real_r_EN_A <= ap_const_logic_1;
        else 
            Real_r_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    Real_r_Rst_A <= ap_rst_n_inv;

    Real_r_WEN_A_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state52, ap_CS_fsm_state77, ap_CS_fsm_state102, ap_CS_fsm_state107, ap_CS_fsm_state106)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            Real_r_WEN_A <= ap_const_lv4_F;
        else 
            Real_r_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    add_ln43_fu_1316_p2 <= std_logic_vector(unsigned(c_0_0_reg_496) + unsigned(ap_const_lv11_10));
    add_ln67_1_fu_918_p2 <= std_logic_vector(unsigned(c_aux_0_1_reg_520) + unsigned(ap_const_lv3_1));
    add_ln67_2_fu_1074_p2 <= std_logic_vector(unsigned(c_aux_0_2_reg_531) + unsigned(ap_const_lv3_1));
    add_ln67_3_fu_1241_p2 <= std_logic_vector(unsigned(c_aux_0_3_reg_543) + unsigned(ap_const_lv3_1));
    add_ln67_fu_749_p2 <= std_logic_vector(unsigned(c_aux_0_0_reg_508) + unsigned(ap_const_lv3_1));
    add_ln85_1_fu_1311_p2 <= std_logic_vector(unsigned(zext_ln49_5_reg_1791) + unsigned(zext_ln75_1_fu_1247_p1));
    add_ln85_fu_988_p2 <= std_logic_vector(unsigned(zext_ln49_4_reg_1562) + unsigned(zext_ln75_fu_924_p1));
    add_ln_fu_874_p3 <= (tmp_18_fu_864_p4 & c_aux_0_0_reg_508);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);

    ap_done_assign_proc : process(ap_CS_fsm_state103, icmp_ln92_fu_1355_p2)
    begin
        if (((icmp_ln92_fu_1355_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state103))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state103, icmp_ln92_fu_1355_p2)
    begin
        if (((icmp_ln92_fu_1355_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state103))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    empty_19_fu_701_p1 <= c_0_0_reg_496(10 - 1 downto 0);

    grp_fu_565_p1_assign_proc : process(reg_597, reg_671, ap_CS_fsm_state13, ap_CS_fsm_state22, ap_CS_fsm_state38, ap_CS_fsm_state47, ap_CS_fsm_state63, ap_CS_fsm_state72, ap_CS_fsm_state88, ap_CS_fsm_state97)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_565_p1 <= reg_671;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_565_p1 <= reg_597;
        else 
            grp_fu_565_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_569_p1_assign_proc : process(reg_683, select_ln76_1_reg_1482, select_ln76_3_reg_1594, select_ln76_5_reg_1706, select_ln76_7_reg_1823, ap_CS_fsm_state13, ap_CS_fsm_state22, ap_CS_fsm_state38, ap_CS_fsm_state47, ap_CS_fsm_state63, ap_CS_fsm_state72, ap_CS_fsm_state88, ap_CS_fsm_state97)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            grp_fu_569_p1 <= select_ln76_7_reg_1823;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_fu_569_p1 <= select_ln76_5_reg_1706;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_569_p1 <= select_ln76_3_reg_1594;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_569_p1 <= reg_683;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_569_p1 <= select_ln76_1_reg_1482;
        else 
            grp_fu_569_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_577_p1_assign_proc : process(select_ln82_1_reg_1492, select_ln82_3_reg_1604, select_ln82_5_reg_1716, select_ln82_7_reg_1833, ap_CS_fsm_state13, ap_CS_fsm_state38, ap_CS_fsm_state63, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            grp_fu_577_p1 <= select_ln82_7_reg_1833;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_fu_577_p1 <= select_ln82_5_reg_1716;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_577_p1 <= select_ln82_3_reg_1604;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_577_p1 <= select_ln82_1_reg_1492;
        else 
            grp_fu_577_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_581_p0_assign_proc : process(ap_CS_fsm_state9, tmp_2_fu_759_p6, tmp_11_fu_836_p6, ap_CS_fsm_state18, ap_CS_fsm_state34, tmp_20_fu_932_p6, tmp_21_fu_1014_p6, ap_CS_fsm_state43, ap_CS_fsm_state59, tmp_23_fu_1084_p6, tmp_25_fu_1170_p6, ap_CS_fsm_state68, ap_CS_fsm_state84, tmp_29_fu_1255_p6, tmp_30_fu_1322_p6, ap_CS_fsm_state93)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            grp_fu_581_p0 <= tmp_30_fu_1322_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            grp_fu_581_p0 <= tmp_29_fu_1255_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_fu_581_p0 <= tmp_25_fu_1170_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_fu_581_p0 <= tmp_23_fu_1084_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_581_p0 <= tmp_21_fu_1014_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_581_p0 <= tmp_20_fu_932_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_581_p0 <= tmp_11_fu_836_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_581_p0 <= tmp_2_fu_759_p6;
        else 
            grp_fu_581_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_581_p1_assign_proc : process(reg_608, reg_677, ap_CS_fsm_state9, ap_CS_fsm_state18, ap_CS_fsm_state34, ap_CS_fsm_state43, ap_CS_fsm_state59, ap_CS_fsm_state68, ap_CS_fsm_state84, ap_CS_fsm_state93)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_581_p1 <= reg_677;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_581_p1 <= reg_608;
        else 
            grp_fu_581_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_585_p0_assign_proc : process(ap_CS_fsm_state9, tmp_2_fu_759_p6, ap_CS_fsm_state18, tmp_15_fu_850_p6, ap_CS_fsm_state34, tmp_20_fu_932_p6, ap_CS_fsm_state43, tmp_22_fu_1028_p6, ap_CS_fsm_state59, tmp_23_fu_1084_p6, ap_CS_fsm_state68, tmp_26_fu_1184_p6, ap_CS_fsm_state84, tmp_29_fu_1255_p6, ap_CS_fsm_state93, tmp_31_fu_1336_p6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            grp_fu_585_p0 <= tmp_31_fu_1336_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            grp_fu_585_p0 <= tmp_29_fu_1255_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_fu_585_p0 <= tmp_26_fu_1184_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_fu_585_p0 <= tmp_23_fu_1084_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_585_p0 <= tmp_22_fu_1028_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_585_p0 <= tmp_20_fu_932_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_585_p0 <= tmp_15_fu_850_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_585_p0 <= tmp_2_fu_759_p6;
        else 
            grp_fu_585_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_585_p1_assign_proc : process(reg_688, ap_CS_fsm_state9, select_ln76_fu_781_p3, ap_CS_fsm_state18, ap_CS_fsm_state34, select_ln76_2_fu_954_p3, ap_CS_fsm_state43, ap_CS_fsm_state59, select_ln76_4_fu_1106_p3, ap_CS_fsm_state68, ap_CS_fsm_state84, select_ln76_6_fu_1277_p3, ap_CS_fsm_state93)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            grp_fu_585_p1 <= select_ln76_6_fu_1277_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_fu_585_p1 <= select_ln76_4_fu_1106_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_585_p1 <= select_ln76_2_fu_954_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_585_p1 <= reg_688;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_585_p1 <= select_ln76_fu_781_p3;
        else 
            grp_fu_585_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_589_p0_assign_proc : process(ap_CS_fsm_state9, tmp_2_fu_759_p6, ap_CS_fsm_state34, tmp_20_fu_932_p6, ap_CS_fsm_state59, tmp_23_fu_1084_p6, ap_CS_fsm_state84, tmp_29_fu_1255_p6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            grp_fu_589_p0 <= tmp_29_fu_1255_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_fu_589_p0 <= tmp_23_fu_1084_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_589_p0 <= tmp_20_fu_932_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_589_p0 <= tmp_2_fu_759_p6;
        else 
            grp_fu_589_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_593_p0_assign_proc : process(ap_CS_fsm_state9, tmp_2_fu_759_p6, ap_CS_fsm_state34, tmp_20_fu_932_p6, ap_CS_fsm_state59, tmp_23_fu_1084_p6, ap_CS_fsm_state84, tmp_29_fu_1255_p6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            grp_fu_593_p0 <= tmp_29_fu_1255_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_fu_593_p0 <= tmp_23_fu_1084_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_593_p0 <= tmp_20_fu_932_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_593_p0 <= tmp_2_fu_759_p6;
        else 
            grp_fu_593_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_593_p1_assign_proc : process(ap_CS_fsm_state9, select_ln82_fu_798_p3, ap_CS_fsm_state34, select_ln82_2_fu_971_p3, ap_CS_fsm_state59, select_ln82_4_fu_1123_p3, ap_CS_fsm_state84, select_ln82_6_fu_1294_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            grp_fu_593_p1 <= select_ln82_6_fu_1294_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_fu_593_p1 <= select_ln82_4_fu_1123_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_593_p1 <= select_ln82_2_fu_971_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_593_p1 <= select_ln82_fu_798_p3;
        else 
            grp_fu_593_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_1361_p2 <= std_logic_vector(unsigned(i_0_reg_554) + unsigned(ap_const_lv9_1));
    icmp_ln67_1_fu_912_p2 <= "1" when (c_aux_0_1_reg_520 = ap_const_lv3_4) else "0";
    icmp_ln67_2_fu_1068_p2 <= "1" when (c_aux_0_2_reg_531 = ap_const_lv3_4) else "0";
    icmp_ln67_3_fu_1235_p2 <= "1" when (c_aux_0_3_reg_543 = ap_const_lv3_4) else "0";
    icmp_ln67_fu_743_p2 <= "1" when (c_aux_0_0_reg_508 = ap_const_lv3_4) else "0";
    icmp_ln92_fu_1355_p2 <= "1" when (i_0_reg_554 = ap_const_lv9_1E0) else "0";
    lut_reorder_I_address0 <= zext_ln96_fu_1367_p1(9 - 1 downto 0);

    lut_reorder_I_ce0_assign_proc : process(ap_CS_fsm_state103)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            lut_reorder_I_ce0 <= ap_const_logic_1;
        else 
            lut_reorder_I_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_reorder_J_address0 <= zext_ln96_fu_1367_p1(9 - 1 downto 0);

    lut_reorder_J_ce0_assign_proc : process(ap_CS_fsm_state103)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            lut_reorder_J_ce0 <= ap_const_logic_1;
        else 
            lut_reorder_J_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln43_1_fu_993_p2 <= (empty_19_reg_1387 or ap_const_lv10_8);
    or_ln43_2_fu_1149_p2 <= (empty_19_reg_1387 or ap_const_lv10_C);
    or_ln43_fu_815_p2 <= (empty_19_reg_1387 or ap_const_lv10_4);
    or_ln45_1_fu_820_p2 <= (empty_19_reg_1387 or ap_const_lv10_5);
    or_ln45_2_fu_998_p2 <= (empty_19_reg_1387 or ap_const_lv10_9);
    or_ln45_3_fu_1154_p2 <= (empty_19_reg_1387 or ap_const_lv10_D);
    or_ln45_fu_705_p2 <= (empty_19_fu_701_p1 or ap_const_lv10_1);
    or_ln46_1_fu_888_p2 <= (empty_19_reg_1387 or ap_const_lv10_6);
    or_ln46_2_fu_1047_p2 <= (empty_19_reg_1387 or ap_const_lv10_A);
    or_ln46_3_fu_1211_p2 <= (empty_19_reg_1387 or ap_const_lv10_E);
    or_ln46_fu_722_p2 <= (empty_19_reg_1387 or ap_const_lv10_2);
    or_ln47_1_fu_893_p2 <= (empty_19_reg_1387 or ap_const_lv10_7);
    or_ln47_2_fu_1052_p2 <= (empty_19_reg_1387 or ap_const_lv10_B);
    or_ln47_3_fu_1216_p2 <= (empty_19_reg_1387 or ap_const_lv10_F);
    or_ln47_fu_727_p2 <= (empty_19_reg_1387 or ap_const_lv10_3);
    select_ln76_1_fu_790_p3 <= 
        reg_603 when (trunc_ln76_fu_777_p1(0) = '1') else 
        reg_617;
    select_ln76_2_fu_954_p3 <= 
        reg_613 when (trunc_ln76_1_fu_950_p1(0) = '1') else 
        reg_626;
    select_ln76_3_fu_963_p3 <= 
        reg_603 when (trunc_ln76_1_fu_950_p1(0) = '1') else 
        reg_617;
    select_ln76_4_fu_1106_p3 <= 
        reg_613 when (trunc_ln76_2_fu_1102_p1(0) = '1') else 
        reg_626;
    select_ln76_5_fu_1115_p3 <= 
        reg_603 when (trunc_ln76_2_fu_1102_p1(0) = '1') else 
        reg_617;
    select_ln76_6_fu_1277_p3 <= 
        reg_613 when (trunc_ln76_3_fu_1273_p1(0) = '1') else 
        reg_626;
    select_ln76_7_fu_1286_p3 <= 
        reg_603 when (trunc_ln76_3_fu_1273_p1(0) = '1') else 
        reg_617;
    select_ln76_fu_781_p3 <= 
        reg_613 when (trunc_ln76_fu_777_p1(0) = '1') else 
        reg_626;
    select_ln82_1_fu_807_p3 <= 
        reg_639 when (trunc_ln76_fu_777_p1(0) = '1') else 
        reg_635;
    select_ln82_2_fu_971_p3 <= 
        reg_647 when (trunc_ln76_1_fu_950_p1(0) = '1') else 
        reg_643;
    select_ln82_3_fu_980_p3 <= 
        reg_639 when (trunc_ln76_1_fu_950_p1(0) = '1') else 
        reg_635;
    select_ln82_4_fu_1123_p3 <= 
        reg_647 when (trunc_ln76_2_fu_1102_p1(0) = '1') else 
        reg_643;
    select_ln82_5_fu_1132_p3 <= 
        reg_639 when (trunc_ln76_2_fu_1102_p1(0) = '1') else 
        reg_635;
    select_ln82_6_fu_1294_p3 <= 
        reg_647 when (trunc_ln76_3_fu_1273_p1(0) = '1') else 
        reg_643;
    select_ln82_7_fu_1303_p3 <= 
        reg_639 when (trunc_ln76_3_fu_1273_p1(0) = '1') else 
        reg_635;
    select_ln82_fu_798_p3 <= 
        reg_647 when (trunc_ln76_fu_777_p1(0) = '1') else 
        reg_643;
    tmp_18_fu_864_p4 <= c_0_0_reg_496(10 downto 3);
    tmp_20_fu_932_p5 <= c_aux_0_1_reg_520(2 - 1 downto 0);
    tmp_23_fu_1084_p5 <= c_aux_0_2_reg_531(2 - 1 downto 0);
    tmp_28_fu_1198_p3 <= (tmp_27_reg_1721 & c_aux_0_2_reg_531);
    tmp_29_fu_1255_p5 <= c_aux_0_3_reg_543(2 - 1 downto 0);
    tmp_2_fu_759_p5 <= c_aux_0_0_reg_508(2 - 1 downto 0);
    tmp_32_fu_693_p3 <= c_0_0_reg_496(10 downto 10);
    trunc_ln75_1_fu_928_p1 <= c_aux_0_1_reg_520(2 - 1 downto 0);
    trunc_ln75_2_fu_1080_p1 <= c_aux_0_2_reg_531(2 - 1 downto 0);
    trunc_ln75_3_fu_1251_p1 <= c_aux_0_3_reg_543(2 - 1 downto 0);
    trunc_ln75_fu_755_p1 <= c_aux_0_0_reg_508(2 - 1 downto 0);
    trunc_ln76_1_fu_950_p1 <= c_aux_0_1_reg_520(1 - 1 downto 0);
    trunc_ln76_2_fu_1102_p1 <= c_aux_0_2_reg_531(1 - 1 downto 0);
    trunc_ln76_3_fu_1273_p1 <= c_aux_0_3_reg_543(1 - 1 downto 0);
    trunc_ln76_fu_777_p1 <= c_aux_0_0_reg_508(1 - 1 downto 0);
    zext_ln101_fu_1379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indexJ_reg_1876),64));
    zext_ln49_1_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln43_fu_815_p2),64));
    zext_ln49_2_fu_1003_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln43_1_fu_993_p2),64));
    zext_ln49_3_fu_1159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln43_2_fu_1149_p2),64));
    zext_ln49_4_fu_909_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln43_reg_1497),11));
    zext_ln49_5_fu_1232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln43_2_reg_1726),11));
    zext_ln49_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_0_reg_496),64));
    zext_ln50_1_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln46_1_fu_888_p2),64));
    zext_ln50_2_fu_1057_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln46_2_fu_1047_p2),64));
    zext_ln50_3_fu_1221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln46_3_fu_1211_p2),64));
    zext_ln50_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln46_fu_722_p2),64));
    zext_ln51_1_fu_830_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln45_1_fu_820_p2),64));
    zext_ln51_2_fu_1008_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln45_2_fu_998_p2),64));
    zext_ln51_3_fu_1164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln45_3_fu_1154_p2),64));
    zext_ln51_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln45_fu_705_p2),64));
    zext_ln53_1_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln47_1_fu_893_p2),64));
    zext_ln53_2_fu_1062_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln47_2_fu_1052_p2),64));
    zext_ln53_3_fu_1226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln47_3_fu_1216_p2),64));
    zext_ln53_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln47_fu_727_p2),64));
    zext_ln75_1_fu_1247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_aux_0_3_reg_543),11));
    zext_ln75_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_aux_0_1_reg_520),11));
    zext_ln85_1_fu_1042_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln85_reg_1609),64));
    zext_ln85_2_fu_1205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_1198_p3),64));
    zext_ln85_3_fu_1350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln85_1_reg_1838),64));
    zext_ln85_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln_fu_874_p3),64));
    zext_ln96_fu_1367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_554),64));
    zext_ln99_fu_1373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut_reorder_I_q0),64));
end behav;
