// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Reorder_fft,hls_ip_2019_1_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.660000,HLS_SYN_LAT=23714,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=20,HLS_SYN_FF=2812,HLS_SYN_LUT=5094,HLS_VERSION=2019_1_3}" *)

module Reorder_fft (
        ap_clk,
        ap_rst_n,
        Real_r_Addr_A,
        Real_r_EN_A,
        Real_r_WEN_A,
        Real_r_Din_A,
        Real_r_Dout_A,
        Real_r_Clk_A,
        Real_r_Rst_A,
        Imag_Addr_A,
        Imag_EN_A,
        Imag_WEN_A,
        Imag_Din_A,
        Imag_Dout_A,
        Imag_Clk_A,
        Imag_Rst_A,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 107'd1;
parameter    ap_ST_fsm_state2 = 107'd2;
parameter    ap_ST_fsm_state3 = 107'd4;
parameter    ap_ST_fsm_state4 = 107'd8;
parameter    ap_ST_fsm_state5 = 107'd16;
parameter    ap_ST_fsm_state6 = 107'd32;
parameter    ap_ST_fsm_state7 = 107'd64;
parameter    ap_ST_fsm_state8 = 107'd128;
parameter    ap_ST_fsm_state9 = 107'd256;
parameter    ap_ST_fsm_state10 = 107'd512;
parameter    ap_ST_fsm_state11 = 107'd1024;
parameter    ap_ST_fsm_state12 = 107'd2048;
parameter    ap_ST_fsm_state13 = 107'd4096;
parameter    ap_ST_fsm_state14 = 107'd8192;
parameter    ap_ST_fsm_state15 = 107'd16384;
parameter    ap_ST_fsm_state16 = 107'd32768;
parameter    ap_ST_fsm_state17 = 107'd65536;
parameter    ap_ST_fsm_state18 = 107'd131072;
parameter    ap_ST_fsm_state19 = 107'd262144;
parameter    ap_ST_fsm_state20 = 107'd524288;
parameter    ap_ST_fsm_state21 = 107'd1048576;
parameter    ap_ST_fsm_state22 = 107'd2097152;
parameter    ap_ST_fsm_state23 = 107'd4194304;
parameter    ap_ST_fsm_state24 = 107'd8388608;
parameter    ap_ST_fsm_state25 = 107'd16777216;
parameter    ap_ST_fsm_state26 = 107'd33554432;
parameter    ap_ST_fsm_state27 = 107'd67108864;
parameter    ap_ST_fsm_state28 = 107'd134217728;
parameter    ap_ST_fsm_state29 = 107'd268435456;
parameter    ap_ST_fsm_state30 = 107'd536870912;
parameter    ap_ST_fsm_state31 = 107'd1073741824;
parameter    ap_ST_fsm_state32 = 107'd2147483648;
parameter    ap_ST_fsm_state33 = 107'd4294967296;
parameter    ap_ST_fsm_state34 = 107'd8589934592;
parameter    ap_ST_fsm_state35 = 107'd17179869184;
parameter    ap_ST_fsm_state36 = 107'd34359738368;
parameter    ap_ST_fsm_state37 = 107'd68719476736;
parameter    ap_ST_fsm_state38 = 107'd137438953472;
parameter    ap_ST_fsm_state39 = 107'd274877906944;
parameter    ap_ST_fsm_state40 = 107'd549755813888;
parameter    ap_ST_fsm_state41 = 107'd1099511627776;
parameter    ap_ST_fsm_state42 = 107'd2199023255552;
parameter    ap_ST_fsm_state43 = 107'd4398046511104;
parameter    ap_ST_fsm_state44 = 107'd8796093022208;
parameter    ap_ST_fsm_state45 = 107'd17592186044416;
parameter    ap_ST_fsm_state46 = 107'd35184372088832;
parameter    ap_ST_fsm_state47 = 107'd70368744177664;
parameter    ap_ST_fsm_state48 = 107'd140737488355328;
parameter    ap_ST_fsm_state49 = 107'd281474976710656;
parameter    ap_ST_fsm_state50 = 107'd562949953421312;
parameter    ap_ST_fsm_state51 = 107'd1125899906842624;
parameter    ap_ST_fsm_state52 = 107'd2251799813685248;
parameter    ap_ST_fsm_state53 = 107'd4503599627370496;
parameter    ap_ST_fsm_state54 = 107'd9007199254740992;
parameter    ap_ST_fsm_state55 = 107'd18014398509481984;
parameter    ap_ST_fsm_state56 = 107'd36028797018963968;
parameter    ap_ST_fsm_state57 = 107'd72057594037927936;
parameter    ap_ST_fsm_state58 = 107'd144115188075855872;
parameter    ap_ST_fsm_state59 = 107'd288230376151711744;
parameter    ap_ST_fsm_state60 = 107'd576460752303423488;
parameter    ap_ST_fsm_state61 = 107'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 107'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 107'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 107'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 107'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 107'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 107'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 107'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 107'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 107'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 107'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 107'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 107'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 107'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 107'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 107'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 107'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 107'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 107'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 107'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 107'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 107'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 107'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 107'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 107'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 107'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 107'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 107'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 107'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 107'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 107'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 107'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 107'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 107'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 107'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 107'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 107'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 107'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 107'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 107'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 107'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 107'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 107'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 107'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 107'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 107'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 107'd81129638414606681695789005144064;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [31:0] Real_r_Addr_A;
output   Real_r_EN_A;
output  [3:0] Real_r_WEN_A;
output  [31:0] Real_r_Din_A;
input  [31:0] Real_r_Dout_A;
output   Real_r_Clk_A;
output   Real_r_Rst_A;
output  [31:0] Imag_Addr_A;
output   Imag_EN_A;
output  [3:0] Imag_WEN_A;
output  [31:0] Imag_Din_A;
input  [31:0] Imag_Dout_A;
output   Imag_Clk_A;
output   Imag_Rst_A;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg Real_r_EN_A;
reg[3:0] Real_r_WEN_A;
reg[31:0] Real_r_Din_A;
reg Imag_EN_A;
reg[3:0] Imag_WEN_A;
reg[31:0] Imag_Din_A;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [106:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [8:0] lut_reorder_I_address0;
reg    lut_reorder_I_ce0;
wire   [9:0] lut_reorder_I_q0;
wire   [8:0] lut_reorder_J_address0;
reg    lut_reorder_J_ce0;
wire   [9:0] lut_reorder_J_q0;
reg   [31:0] reg_597;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state105;
reg   [31:0] reg_603;
reg   [31:0] reg_608;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state79;
reg   [31:0] reg_613;
reg   [31:0] reg_617;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state80;
reg   [31:0] reg_621;
reg   [31:0] reg_626;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state81;
reg   [31:0] reg_630;
reg   [31:0] reg_635;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state82;
reg   [31:0] reg_639;
reg   [31:0] reg_643;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state83;
reg   [31:0] reg_647;
wire   [31:0] grp_fu_581_p2;
reg   [31:0] reg_651;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state96;
wire   [31:0] grp_fu_585_p2;
reg   [31:0] reg_656;
wire   [31:0] grp_fu_589_p2;
reg   [31:0] reg_661;
wire   [31:0] grp_fu_593_p2;
reg   [31:0] reg_666;
wire   [31:0] grp_fu_565_p2;
reg   [31:0] reg_671;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state92;
wire    ap_CS_fsm_state101;
wire   [31:0] grp_fu_569_p2;
reg   [31:0] reg_677;
wire   [31:0] grp_fu_573_p2;
reg   [31:0] reg_683;
wire   [31:0] grp_fu_577_p2;
reg   [31:0] reg_688;
wire   [9:0] empty_19_fu_701_p1;
reg   [9:0] empty_19_reg_1387;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_32_fu_693_p3;
wire   [63:0] zext_ln49_fu_711_p1;
reg   [63:0] zext_ln49_reg_1405;
reg   [9:0] Real_addr_2_reg_1415;
reg   [9:0] Imag_addr_reg_1420;
wire   [63:0] zext_ln50_fu_732_p1;
reg   [63:0] zext_ln50_reg_1425;
reg   [9:0] Real_addr_3_reg_1435;
reg   [9:0] Imag_addr_1_reg_1440;
wire   [2:0] add_ln67_fu_749_p2;
reg   [2:0] add_ln67_reg_1458;
wire    ap_CS_fsm_state9;
wire   [1:0] trunc_ln75_fu_755_p1;
reg   [1:0] trunc_ln75_reg_1463;
wire   [0:0] icmp_ln67_fu_743_p2;
wire   [31:0] tmp_2_fu_759_p6;
wire   [31:0] select_ln76_fu_781_p3;
wire   [31:0] select_ln76_1_fu_790_p3;
reg   [31:0] select_ln76_1_reg_1482;
wire   [31:0] select_ln82_fu_798_p3;
wire   [31:0] select_ln82_1_fu_807_p3;
reg   [31:0] select_ln82_1_reg_1492;
wire   [9:0] or_ln43_fu_815_p2;
reg   [9:0] or_ln43_reg_1497;
wire   [63:0] zext_ln49_1_fu_825_p1;
reg   [63:0] zext_ln49_1_reg_1502;
reg   [9:0] Real_addr_8_reg_1512;
reg   [9:0] Imag_addr_6_reg_1517;
wire   [31:0] tmp_11_fu_836_p6;
wire    ap_CS_fsm_state18;
wire   [31:0] tmp_15_fu_850_p6;
wire   [63:0] zext_ln50_1_fu_898_p1;
reg   [63:0] zext_ln50_1_reg_1532;
reg   [9:0] Real_addr_9_reg_1542;
reg   [9:0] Imag_addr_7_reg_1547;
wire   [10:0] zext_ln49_4_fu_909_p1;
reg   [10:0] zext_ln49_4_reg_1562;
wire   [2:0] add_ln67_1_fu_918_p2;
reg   [2:0] add_ln67_1_reg_1570;
wire    ap_CS_fsm_state34;
wire   [1:0] trunc_ln75_1_fu_928_p1;
reg   [1:0] trunc_ln75_1_reg_1575;
wire   [0:0] icmp_ln67_1_fu_912_p2;
wire   [31:0] tmp_20_fu_932_p6;
wire   [31:0] select_ln76_2_fu_954_p3;
wire   [31:0] select_ln76_3_fu_963_p3;
reg   [31:0] select_ln76_3_reg_1594;
wire   [31:0] select_ln82_2_fu_971_p3;
wire   [31:0] select_ln82_3_fu_980_p3;
reg   [31:0] select_ln82_3_reg_1604;
wire   [10:0] add_ln85_fu_988_p2;
reg   [10:0] add_ln85_reg_1609;
wire   [9:0] or_ln43_1_fu_993_p2;
reg   [9:0] or_ln43_1_reg_1614;
wire   [63:0] zext_ln49_2_fu_1003_p1;
reg   [63:0] zext_ln49_2_reg_1619;
reg   [9:0] Real_addr_13_reg_1629;
reg   [9:0] Imag_addr_11_reg_1634;
wire   [31:0] tmp_21_fu_1014_p6;
wire    ap_CS_fsm_state43;
wire   [31:0] tmp_22_fu_1028_p6;
wire   [63:0] zext_ln50_2_fu_1057_p1;
reg   [63:0] zext_ln50_2_reg_1649;
reg   [9:0] Real_addr_14_reg_1659;
reg   [9:0] Imag_addr_12_reg_1664;
wire   [2:0] add_ln67_2_fu_1074_p2;
reg   [2:0] add_ln67_2_reg_1682;
wire    ap_CS_fsm_state59;
wire   [1:0] trunc_ln75_2_fu_1080_p1;
reg   [1:0] trunc_ln75_2_reg_1687;
wire   [0:0] icmp_ln67_2_fu_1068_p2;
wire   [31:0] tmp_23_fu_1084_p6;
wire   [31:0] select_ln76_4_fu_1106_p3;
wire   [31:0] select_ln76_5_fu_1115_p3;
reg   [31:0] select_ln76_5_reg_1706;
wire   [31:0] select_ln82_4_fu_1123_p3;
wire   [31:0] select_ln82_5_fu_1132_p3;
reg   [31:0] select_ln82_5_reg_1716;
reg   [6:0] tmp_27_reg_1721;
wire   [9:0] or_ln43_2_fu_1149_p2;
reg   [9:0] or_ln43_2_reg_1726;
wire   [63:0] zext_ln49_3_fu_1159_p1;
reg   [63:0] zext_ln49_3_reg_1731;
reg   [9:0] Real_addr_18_reg_1741;
reg   [9:0] Imag_addr_16_reg_1746;
wire   [31:0] tmp_25_fu_1170_p6;
wire    ap_CS_fsm_state68;
wire   [31:0] tmp_26_fu_1184_p6;
wire   [63:0] zext_ln50_3_fu_1221_p1;
reg   [63:0] zext_ln50_3_reg_1761;
reg   [9:0] Real_addr_19_reg_1771;
reg   [9:0] Imag_addr_17_reg_1776;
wire   [10:0] zext_ln49_5_fu_1232_p1;
reg   [10:0] zext_ln49_5_reg_1791;
wire   [2:0] add_ln67_3_fu_1241_p2;
reg   [2:0] add_ln67_3_reg_1799;
wire    ap_CS_fsm_state84;
wire   [1:0] trunc_ln75_3_fu_1251_p1;
reg   [1:0] trunc_ln75_3_reg_1804;
wire   [0:0] icmp_ln67_3_fu_1235_p2;
wire   [31:0] tmp_29_fu_1255_p6;
wire   [31:0] select_ln76_6_fu_1277_p3;
wire   [31:0] select_ln76_7_fu_1286_p3;
reg   [31:0] select_ln76_7_reg_1823;
wire   [31:0] select_ln82_6_fu_1294_p3;
wire   [31:0] select_ln82_7_fu_1303_p3;
reg   [31:0] select_ln82_7_reg_1833;
wire   [10:0] add_ln85_1_fu_1311_p2;
reg   [10:0] add_ln85_1_reg_1838;
wire   [10:0] add_ln43_fu_1316_p2;
wire   [31:0] tmp_30_fu_1322_p6;
wire    ap_CS_fsm_state93;
wire   [31:0] tmp_31_fu_1336_p6;
wire   [8:0] i_fu_1361_p2;
reg   [8:0] i_reg_1861;
wire    ap_CS_fsm_state103;
wire   [0:0] icmp_ln92_fu_1355_p2;
reg   [9:0] indexJ_reg_1876;
wire    ap_CS_fsm_state104;
reg   [9:0] Real_addr_4_reg_1881;
reg   [9:0] Imag_addr_4_reg_1886;
reg   [9:0] Real_addr_5_reg_1891;
reg   [9:0] Imag_addr_5_reg_1896;
reg   [10:0] c_0_0_reg_496;
reg   [2:0] c_aux_0_0_reg_508;
wire    ap_CS_fsm_state27;
reg   [2:0] c_aux_0_1_reg_520;
wire    ap_CS_fsm_state52;
reg   [2:0] c_aux_0_2_reg_531;
wire    ap_CS_fsm_state77;
reg   [2:0] c_aux_0_3_reg_543;
wire    ap_CS_fsm_state102;
reg   [8:0] i_0_reg_554;
wire    ap_CS_fsm_state107;
wire   [63:0] zext_ln51_fu_716_p1;
wire   [63:0] zext_ln53_fu_737_p1;
wire   [63:0] zext_ln51_1_fu_830_p1;
wire   [63:0] zext_ln85_fu_882_p1;
wire   [63:0] zext_ln53_1_fu_903_p1;
wire   [63:0] zext_ln51_2_fu_1008_p1;
wire   [63:0] zext_ln85_1_fu_1042_p1;
wire   [63:0] zext_ln53_2_fu_1062_p1;
wire   [63:0] zext_ln51_3_fu_1164_p1;
wire   [63:0] zext_ln85_2_fu_1205_p1;
wire   [63:0] zext_ln53_3_fu_1226_p1;
wire   [63:0] zext_ln85_3_fu_1350_p1;
wire   [63:0] zext_ln96_fu_1367_p1;
wire   [63:0] zext_ln99_fu_1373_p1;
wire   [63:0] zext_ln101_fu_1379_p1;
reg   [31:0] Real_r_Addr_A_orig;
wire    ap_CS_fsm_state106;
reg   [31:0] Imag_Addr_A_orig;
reg   [31:0] grp_fu_565_p1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state97;
reg   [31:0] grp_fu_569_p1;
reg   [31:0] grp_fu_577_p1;
reg   [31:0] grp_fu_581_p0;
reg   [31:0] grp_fu_581_p1;
reg   [31:0] grp_fu_585_p0;
reg   [31:0] grp_fu_585_p1;
reg   [31:0] grp_fu_589_p0;
reg   [31:0] grp_fu_593_p0;
reg   [31:0] grp_fu_593_p1;
wire   [9:0] or_ln45_fu_705_p2;
wire   [9:0] or_ln46_fu_722_p2;
wire   [9:0] or_ln47_fu_727_p2;
wire   [1:0] tmp_2_fu_759_p5;
wire   [0:0] trunc_ln76_fu_777_p1;
wire   [9:0] or_ln45_1_fu_820_p2;
wire   [7:0] tmp_18_fu_864_p4;
wire   [10:0] add_ln_fu_874_p3;
wire   [9:0] or_ln46_1_fu_888_p2;
wire   [9:0] or_ln47_1_fu_893_p2;
wire   [1:0] tmp_20_fu_932_p5;
wire   [0:0] trunc_ln76_1_fu_950_p1;
wire   [10:0] zext_ln75_fu_924_p1;
wire   [9:0] or_ln45_2_fu_998_p2;
wire   [9:0] or_ln46_2_fu_1047_p2;
wire   [9:0] or_ln47_2_fu_1052_p2;
wire   [1:0] tmp_23_fu_1084_p5;
wire   [0:0] trunc_ln76_2_fu_1102_p1;
wire   [9:0] or_ln45_3_fu_1154_p2;
wire   [9:0] tmp_28_fu_1198_p3;
wire   [9:0] or_ln46_3_fu_1211_p2;
wire   [9:0] or_ln47_3_fu_1216_p2;
wire   [1:0] tmp_29_fu_1255_p5;
wire   [0:0] trunc_ln76_3_fu_1273_p1;
wire   [10:0] zext_ln75_1_fu_1247_p1;
reg   [106:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 107'd1;
end

Reorder_fft_lut_rbkb #(
    .DataWidth( 10 ),
    .AddressRange( 480 ),
    .AddressWidth( 9 ))
lut_reorder_I_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lut_reorder_I_address0),
    .ce0(lut_reorder_I_ce0),
    .q0(lut_reorder_I_q0)
);

Reorder_fft_lut_rcud #(
    .DataWidth( 10 ),
    .AddressRange( 480 ),
    .AddressWidth( 9 ))
lut_reorder_J_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lut_reorder_J_address0),
    .ce0(lut_reorder_J_ce0),
    .q0(lut_reorder_J_q0)
);

Reorder_fft_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
Reorder_fft_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

Reorder_fft_fadd_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Reorder_fft_fadd_dEe_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_651),
    .din1(grp_fu_565_p1),
    .ce(1'b1),
    .dout(grp_fu_565_p2)
);

Reorder_fft_fadd_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Reorder_fft_fadd_dEe_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_656),
    .din1(grp_fu_569_p1),
    .ce(1'b1),
    .dout(grp_fu_569_p2)
);

Reorder_fft_fadd_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Reorder_fft_fadd_dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_661),
    .din1(reg_621),
    .ce(1'b1),
    .dout(grp_fu_573_p2)
);

Reorder_fft_fadd_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Reorder_fft_fadd_dEe_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_666),
    .din1(grp_fu_577_p1),
    .ce(1'b1),
    .dout(grp_fu_577_p2)
);

Reorder_fft_fmul_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Reorder_fft_fmul_eOg_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_581_p0),
    .din1(grp_fu_581_p1),
    .ce(1'b1),
    .dout(grp_fu_581_p2)
);

Reorder_fft_fmul_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Reorder_fft_fmul_eOg_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_585_p0),
    .din1(grp_fu_585_p1),
    .ce(1'b1),
    .dout(grp_fu_585_p2)
);

Reorder_fft_fmul_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Reorder_fft_fmul_eOg_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_589_p0),
    .din1(reg_630),
    .ce(1'b1),
    .dout(grp_fu_589_p2)
);

Reorder_fft_fmul_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Reorder_fft_fmul_eOg_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_593_p0),
    .din1(grp_fu_593_p1),
    .ce(1'b1),
    .dout(grp_fu_593_p2)
);

Reorder_fft_mux_4fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
Reorder_fft_mux_4fYi_U9(
    .din0(32'd1065353216),
    .din1(32'd3212836864),
    .din2(32'd1065353216),
    .din3(32'd3212836864),
    .din4(tmp_2_fu_759_p5),
    .dout(tmp_2_fu_759_p6)
);

Reorder_fft_mux_4fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
Reorder_fft_mux_4fYi_U10(
    .din0(32'd1065353216),
    .din1(32'd1065353216),
    .din2(32'd3212836864),
    .din3(32'd3212836864),
    .din4(trunc_ln75_reg_1463),
    .dout(tmp_11_fu_836_p6)
);

Reorder_fft_mux_4fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
Reorder_fft_mux_4fYi_U11(
    .din0(32'd1065353216),
    .din1(32'd3212836864),
    .din2(32'd3212836864),
    .din3(32'd1065353216),
    .din4(trunc_ln75_reg_1463),
    .dout(tmp_15_fu_850_p6)
);

Reorder_fft_mux_4fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
Reorder_fft_mux_4fYi_U12(
    .din0(32'd1065353216),
    .din1(32'd3212836864),
    .din2(32'd1065353216),
    .din3(32'd3212836864),
    .din4(tmp_20_fu_932_p5),
    .dout(tmp_20_fu_932_p6)
);

Reorder_fft_mux_4fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
Reorder_fft_mux_4fYi_U13(
    .din0(32'd1065353216),
    .din1(32'd1065353216),
    .din2(32'd3212836864),
    .din3(32'd3212836864),
    .din4(trunc_ln75_1_reg_1575),
    .dout(tmp_21_fu_1014_p6)
);

Reorder_fft_mux_4fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
Reorder_fft_mux_4fYi_U14(
    .din0(32'd1065353216),
    .din1(32'd3212836864),
    .din2(32'd3212836864),
    .din3(32'd1065353216),
    .din4(trunc_ln75_1_reg_1575),
    .dout(tmp_22_fu_1028_p6)
);

Reorder_fft_mux_4fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
Reorder_fft_mux_4fYi_U15(
    .din0(32'd1065353216),
    .din1(32'd3212836864),
    .din2(32'd1065353216),
    .din3(32'd3212836864),
    .din4(tmp_23_fu_1084_p5),
    .dout(tmp_23_fu_1084_p6)
);

Reorder_fft_mux_4fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
Reorder_fft_mux_4fYi_U16(
    .din0(32'd1065353216),
    .din1(32'd1065353216),
    .din2(32'd3212836864),
    .din3(32'd3212836864),
    .din4(trunc_ln75_2_reg_1687),
    .dout(tmp_25_fu_1170_p6)
);

Reorder_fft_mux_4fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
Reorder_fft_mux_4fYi_U17(
    .din0(32'd1065353216),
    .din1(32'd3212836864),
    .din2(32'd3212836864),
    .din3(32'd1065353216),
    .din4(trunc_ln75_2_reg_1687),
    .dout(tmp_26_fu_1184_p6)
);

Reorder_fft_mux_4fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
Reorder_fft_mux_4fYi_U18(
    .din0(32'd1065353216),
    .din1(32'd3212836864),
    .din2(32'd1065353216),
    .din3(32'd3212836864),
    .din4(tmp_29_fu_1255_p5),
    .dout(tmp_29_fu_1255_p6)
);

Reorder_fft_mux_4fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
Reorder_fft_mux_4fYi_U19(
    .din0(32'd1065353216),
    .din1(32'd1065353216),
    .din2(32'd3212836864),
    .din3(32'd3212836864),
    .din4(trunc_ln75_3_reg_1804),
    .dout(tmp_30_fu_1322_p6)
);

Reorder_fft_mux_4fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
Reorder_fft_mux_4fYi_U20(
    .din0(32'd1065353216),
    .din1(32'd3212836864),
    .din2(32'd3212836864),
    .din3(32'd1065353216),
    .din4(trunc_ln75_3_reg_1804),
    .dout(tmp_31_fu_1336_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_3_fu_1235_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state84))) begin
        c_0_0_reg_496 <= add_ln43_fu_1316_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_0_0_reg_496 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        c_aux_0_0_reg_508 <= add_ln67_reg_1458;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        c_aux_0_0_reg_508 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        c_aux_0_1_reg_520 <= add_ln67_1_reg_1570;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        c_aux_0_1_reg_520 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        c_aux_0_2_reg_531 <= add_ln67_2_reg_1682;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        c_aux_0_2_reg_531 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        c_aux_0_3_reg_543 <= add_ln67_3_reg_1799;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        c_aux_0_3_reg_543 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_32_fu_693_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_554 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state107)) begin
        i_0_reg_554 <= i_reg_1861;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_1_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
        Imag_addr_11_reg_1634[2 : 1] <= zext_ln51_2_fu_1008_p1[2 : 1];
Imag_addr_11_reg_1634[9 : 4] <= zext_ln51_2_fu_1008_p1[9 : 4];
        Real_addr_13_reg_1629[2 : 1] <= zext_ln51_2_fu_1008_p1[2 : 1];
Real_addr_13_reg_1629[9 : 4] <= zext_ln51_2_fu_1008_p1[9 : 4];
        or_ln43_1_reg_1614[2 : 0] <= or_ln43_1_fu_993_p2[2 : 0];
or_ln43_1_reg_1614[9 : 4] <= or_ln43_1_fu_993_p2[9 : 4];
        zext_ln49_2_reg_1619[2 : 0] <= zext_ln49_2_fu_1003_p1[2 : 0];
zext_ln49_2_reg_1619[9 : 4] <= zext_ln49_2_fu_1003_p1[9 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        Imag_addr_12_reg_1664[2] <= zext_ln53_2_fu_1062_p1[2];
Imag_addr_12_reg_1664[9 : 4] <= zext_ln53_2_fu_1062_p1[9 : 4];
        Real_addr_14_reg_1659[2] <= zext_ln53_2_fu_1062_p1[2];
Real_addr_14_reg_1659[9 : 4] <= zext_ln53_2_fu_1062_p1[9 : 4];
        zext_ln50_2_reg_1649[0] <= zext_ln50_2_fu_1057_p1[0];
zext_ln50_2_reg_1649[2] <= zext_ln50_2_fu_1057_p1[2];
zext_ln50_2_reg_1649[9 : 4] <= zext_ln50_2_fu_1057_p1[9 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_2_fu_1068_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59))) begin
        Imag_addr_16_reg_1746[1] <= zext_ln51_3_fu_1164_p1[1];
Imag_addr_16_reg_1746[9 : 4] <= zext_ln51_3_fu_1164_p1[9 : 4];
        Real_addr_18_reg_1741[1] <= zext_ln51_3_fu_1164_p1[1];
Real_addr_18_reg_1741[9 : 4] <= zext_ln51_3_fu_1164_p1[9 : 4];
        or_ln43_2_reg_1726[1 : 0] <= or_ln43_2_fu_1149_p2[1 : 0];
or_ln43_2_reg_1726[9 : 4] <= or_ln43_2_fu_1149_p2[9 : 4];
        zext_ln49_3_reg_1731[1 : 0] <= zext_ln49_3_fu_1159_p1[1 : 0];
zext_ln49_3_reg_1731[9 : 4] <= zext_ln49_3_fu_1159_p1[9 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        Imag_addr_17_reg_1776[9 : 4] <= zext_ln53_3_fu_1226_p1[9 : 4];
        Real_addr_19_reg_1771[9 : 4] <= zext_ln53_3_fu_1226_p1[9 : 4];
        zext_ln50_3_reg_1761[0] <= zext_ln50_3_fu_1221_p1[0];
zext_ln50_3_reg_1761[9 : 4] <= zext_ln50_3_fu_1221_p1[9 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Imag_addr_1_reg_1440[9 : 2] <= zext_ln53_fu_737_p1[9 : 2];
        Real_addr_3_reg_1435[9 : 2] <= zext_ln53_fu_737_p1[9 : 2];
        zext_ln50_reg_1425[0] <= zext_ln50_fu_732_p1[0];
zext_ln50_reg_1425[9 : 2] <= zext_ln50_fu_732_p1[9 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state104)) begin
        Imag_addr_4_reg_1886 <= zext_ln99_fu_1373_p1;
        Real_addr_4_reg_1881 <= zext_ln99_fu_1373_p1;
        indexJ_reg_1876 <= lut_reorder_J_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        Imag_addr_5_reg_1896 <= zext_ln101_fu_1379_p1;
        Real_addr_5_reg_1891 <= zext_ln101_fu_1379_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_fu_743_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        Imag_addr_6_reg_1517[1] <= zext_ln51_1_fu_830_p1[1];
Imag_addr_6_reg_1517[9 : 3] <= zext_ln51_1_fu_830_p1[9 : 3];
        Real_addr_8_reg_1512[1] <= zext_ln51_1_fu_830_p1[1];
Real_addr_8_reg_1512[9 : 3] <= zext_ln51_1_fu_830_p1[9 : 3];
        or_ln43_reg_1497[1 : 0] <= or_ln43_fu_815_p2[1 : 0];
or_ln43_reg_1497[9 : 3] <= or_ln43_fu_815_p2[9 : 3];
        zext_ln49_1_reg_1502[1 : 0] <= zext_ln49_1_fu_825_p1[1 : 0];
zext_ln49_1_reg_1502[9 : 3] <= zext_ln49_1_fu_825_p1[9 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        Imag_addr_7_reg_1547[9 : 3] <= zext_ln53_1_fu_903_p1[9 : 3];
        Real_addr_9_reg_1542[9 : 3] <= zext_ln53_1_fu_903_p1[9 : 3];
        zext_ln50_1_reg_1532[0] <= zext_ln50_1_fu_898_p1[0];
zext_ln50_1_reg_1532[9 : 3] <= zext_ln50_1_fu_898_p1[9 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_32_fu_693_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Imag_addr_reg_1420[9 : 1] <= zext_ln51_fu_716_p1[9 : 1];
        Real_addr_2_reg_1415[9 : 1] <= zext_ln51_fu_716_p1[9 : 1];
        empty_19_reg_1387 <= empty_19_fu_701_p1;
        zext_ln49_reg_1405[10 : 0] <= zext_ln49_fu_711_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        add_ln67_1_reg_1570 <= add_ln67_1_fu_918_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        add_ln67_2_reg_1682 <= add_ln67_2_fu_1074_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        add_ln67_3_reg_1799 <= add_ln67_3_fu_1241_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln67_reg_1458 <= add_ln67_fu_749_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_3_fu_1235_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state84))) begin
        add_ln85_1_reg_1838 <= add_ln85_1_fu_1311_p2;
        select_ln76_7_reg_1823 <= select_ln76_7_fu_1286_p3;
        select_ln82_7_reg_1833 <= select_ln82_7_fu_1303_p3;
        trunc_ln75_3_reg_1804 <= trunc_ln75_3_fu_1251_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_1_fu_912_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state34))) begin
        add_ln85_reg_1609 <= add_ln85_fu_988_p2;
        select_ln76_3_reg_1594 <= select_ln76_3_fu_963_p3;
        select_ln82_3_reg_1604 <= select_ln82_3_fu_980_p3;
        trunc_ln75_1_reg_1575 <= trunc_ln75_1_fu_928_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        i_reg_1861 <= i_fu_1361_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_597 <= Real_r_Dout_A;
        reg_603 <= Imag_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_608 <= Real_r_Dout_A;
        reg_613 <= Imag_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_617 <= Real_r_Dout_A;
        reg_621 <= Imag_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_626 <= Real_r_Dout_A;
        reg_630 <= Imag_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_635 <= Imag_Dout_A;
        reg_639 <= Real_r_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_643 <= Imag_Dout_A;
        reg_647 <= Real_r_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_651 <= grp_fu_581_p2;
        reg_656 <= grp_fu_585_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_661 <= grp_fu_589_p2;
        reg_666 <= grp_fu_593_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state17))) begin
        reg_671 <= grp_fu_565_p2;
        reg_677 <= grp_fu_569_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state17))) begin
        reg_683 <= grp_fu_573_p2;
        reg_688 <= grp_fu_577_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_fu_743_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        select_ln76_1_reg_1482 <= select_ln76_1_fu_790_p3;
        select_ln82_1_reg_1492 <= select_ln82_1_fu_807_p3;
        trunc_ln75_reg_1463 <= trunc_ln75_fu_755_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_2_fu_1068_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state59))) begin
        select_ln76_5_reg_1706 <= select_ln76_5_fu_1115_p3;
        select_ln82_5_reg_1716 <= select_ln82_5_fu_1132_p3;
        tmp_27_reg_1721 <= {{or_ln43_1_reg_1614[9:3]}};
        trunc_ln75_2_reg_1687 <= trunc_ln75_2_fu_1080_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        zext_ln49_4_reg_1562[1 : 0] <= zext_ln49_4_fu_909_p1[1 : 0];
zext_ln49_4_reg_1562[9 : 3] <= zext_ln49_4_fu_909_p1[9 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        zext_ln49_5_reg_1791[1 : 0] <= zext_ln49_5_fu_1232_p1[1 : 0];
zext_ln49_5_reg_1791[9 : 4] <= zext_ln49_5_fu_1232_p1[9 : 4];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        Imag_Addr_A_orig = Imag_addr_5_reg_1896;
    end else if ((1'b1 == ap_CS_fsm_state106)) begin
        Imag_Addr_A_orig = Imag_addr_4_reg_1886;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        Imag_Addr_A_orig = zext_ln101_fu_1379_p1;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        Imag_Addr_A_orig = zext_ln99_fu_1373_p1;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        Imag_Addr_A_orig = zext_ln85_3_fu_1350_p1;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        Imag_Addr_A_orig = Imag_addr_17_reg_1776;
    end else if ((1'b1 == ap_CS_fsm_state81)) begin
        Imag_Addr_A_orig = Imag_addr_16_reg_1746;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        Imag_Addr_A_orig = zext_ln50_3_reg_1761;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        Imag_Addr_A_orig = zext_ln49_3_reg_1731;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        Imag_Addr_A_orig = zext_ln53_3_fu_1226_p1;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        Imag_Addr_A_orig = zext_ln85_2_fu_1205_p1;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        Imag_Addr_A_orig = zext_ln51_3_fu_1164_p1;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        Imag_Addr_A_orig = Imag_addr_12_reg_1664;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        Imag_Addr_A_orig = Imag_addr_11_reg_1634;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        Imag_Addr_A_orig = zext_ln50_2_reg_1649;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        Imag_Addr_A_orig = zext_ln49_2_reg_1619;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        Imag_Addr_A_orig = zext_ln53_2_fu_1062_p1;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        Imag_Addr_A_orig = zext_ln85_1_fu_1042_p1;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        Imag_Addr_A_orig = zext_ln51_2_fu_1008_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        Imag_Addr_A_orig = Imag_addr_7_reg_1547;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        Imag_Addr_A_orig = Imag_addr_6_reg_1517;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        Imag_Addr_A_orig = zext_ln50_1_reg_1532;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        Imag_Addr_A_orig = zext_ln49_1_reg_1502;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        Imag_Addr_A_orig = zext_ln53_1_fu_903_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        Imag_Addr_A_orig = zext_ln85_fu_882_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        Imag_Addr_A_orig = zext_ln51_1_fu_830_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        Imag_Addr_A_orig = Imag_addr_1_reg_1440;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        Imag_Addr_A_orig = Imag_addr_reg_1420;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        Imag_Addr_A_orig = zext_ln50_reg_1425;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Imag_Addr_A_orig = zext_ln49_reg_1405;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        Imag_Addr_A_orig = zext_ln53_fu_737_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Imag_Addr_A_orig = zext_ln51_fu_716_p1;
    end else begin
        Imag_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        Imag_Din_A = reg_603;
    end else if ((1'b1 == ap_CS_fsm_state106)) begin
        Imag_Din_A = Imag_Dout_A;
    end else if (((1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state27))) begin
        Imag_Din_A = reg_677;
    end else begin
        Imag_Din_A = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state3))) begin
        Imag_EN_A = 1'b1;
    end else begin
        Imag_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state27))) begin
        Imag_WEN_A = 4'd15;
    end else begin
        Imag_WEN_A = 4'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        Real_r_Addr_A_orig = Real_addr_5_reg_1891;
    end else if ((1'b1 == ap_CS_fsm_state106)) begin
        Real_r_Addr_A_orig = Real_addr_4_reg_1881;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        Real_r_Addr_A_orig = zext_ln101_fu_1379_p1;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        Real_r_Addr_A_orig = zext_ln99_fu_1373_p1;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        Real_r_Addr_A_orig = zext_ln85_3_fu_1350_p1;
    end else if (((1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state80))) begin
        Real_r_Addr_A_orig = Real_addr_19_reg_1771;
    end else if (((1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state79))) begin
        Real_r_Addr_A_orig = Real_addr_18_reg_1741;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        Real_r_Addr_A_orig = zext_ln50_3_fu_1221_p1;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        Real_r_Addr_A_orig = zext_ln85_2_fu_1205_p1;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        Real_r_Addr_A_orig = zext_ln49_3_fu_1159_p1;
    end else if (((1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state55))) begin
        Real_r_Addr_A_orig = Real_addr_14_reg_1659;
    end else if (((1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state54))) begin
        Real_r_Addr_A_orig = Real_addr_13_reg_1629;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        Real_r_Addr_A_orig = zext_ln50_2_fu_1057_p1;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        Real_r_Addr_A_orig = zext_ln85_1_fu_1042_p1;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        Real_r_Addr_A_orig = zext_ln49_2_fu_1003_p1;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30))) begin
        Real_r_Addr_A_orig = Real_addr_9_reg_1542;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29))) begin
        Real_r_Addr_A_orig = Real_addr_8_reg_1512;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        Real_r_Addr_A_orig = zext_ln50_1_fu_898_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        Real_r_Addr_A_orig = zext_ln85_fu_882_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        Real_r_Addr_A_orig = zext_ln49_1_fu_825_p1;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        Real_r_Addr_A_orig = Real_addr_3_reg_1435;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        Real_r_Addr_A_orig = Real_addr_2_reg_1415;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        Real_r_Addr_A_orig = zext_ln50_fu_732_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Real_r_Addr_A_orig = zext_ln49_fu_711_p1;
    end else begin
        Real_r_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        Real_r_Din_A = reg_597;
    end else if ((1'b1 == ap_CS_fsm_state106)) begin
        Real_r_Din_A = Real_r_Dout_A;
    end else if (((1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state27))) begin
        Real_r_Din_A = reg_671;
    end else begin
        Real_r_Din_A = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state3))) begin
        Real_r_EN_A = 1'b1;
    end else begin
        Real_r_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state27))) begin
        Real_r_WEN_A = 4'd15;
    end else begin
        Real_r_WEN_A = 4'd0;
    end
end

always @ (*) begin
    if (((icmp_ln92_fu_1355_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state103))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln92_fu_1355_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state103))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_fu_565_p1 = reg_671;
    end else if (((1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state13))) begin
        grp_fu_565_p1 = reg_597;
    end else begin
        grp_fu_565_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        grp_fu_569_p1 = select_ln76_7_reg_1823;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_fu_569_p1 = select_ln76_5_reg_1706;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_569_p1 = select_ln76_3_reg_1594;
    end else if (((1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_fu_569_p1 = reg_683;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_569_p1 = select_ln76_1_reg_1482;
    end else begin
        grp_fu_569_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        grp_fu_577_p1 = select_ln82_7_reg_1833;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_fu_577_p1 = select_ln82_5_reg_1716;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_577_p1 = select_ln82_3_reg_1604;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_577_p1 = select_ln82_1_reg_1492;
    end else begin
        grp_fu_577_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        grp_fu_581_p0 = tmp_30_fu_1322_p6;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        grp_fu_581_p0 = tmp_29_fu_1255_p6;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        grp_fu_581_p0 = tmp_25_fu_1170_p6;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        grp_fu_581_p0 = tmp_23_fu_1084_p6;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_581_p0 = tmp_21_fu_1014_p6;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_581_p0 = tmp_20_fu_932_p6;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_581_p0 = tmp_11_fu_836_p6;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_581_p0 = tmp_2_fu_759_p6;
    end else begin
        grp_fu_581_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_fu_581_p1 = reg_677;
    end else if (((1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_581_p1 = reg_608;
    end else begin
        grp_fu_581_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        grp_fu_585_p0 = tmp_31_fu_1336_p6;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        grp_fu_585_p0 = tmp_29_fu_1255_p6;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        grp_fu_585_p0 = tmp_26_fu_1184_p6;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        grp_fu_585_p0 = tmp_23_fu_1084_p6;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_585_p0 = tmp_22_fu_1028_p6;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_585_p0 = tmp_20_fu_932_p6;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_585_p0 = tmp_15_fu_850_p6;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_585_p0 = tmp_2_fu_759_p6;
    end else begin
        grp_fu_585_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        grp_fu_585_p1 = select_ln76_6_fu_1277_p3;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        grp_fu_585_p1 = select_ln76_4_fu_1106_p3;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_585_p1 = select_ln76_2_fu_954_p3;
    end else if (((1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_fu_585_p1 = reg_688;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_585_p1 = select_ln76_fu_781_p3;
    end else begin
        grp_fu_585_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        grp_fu_589_p0 = tmp_29_fu_1255_p6;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        grp_fu_589_p0 = tmp_23_fu_1084_p6;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_589_p0 = tmp_20_fu_932_p6;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_589_p0 = tmp_2_fu_759_p6;
    end else begin
        grp_fu_589_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        grp_fu_593_p0 = tmp_29_fu_1255_p6;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        grp_fu_593_p0 = tmp_23_fu_1084_p6;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_593_p0 = tmp_20_fu_932_p6;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_593_p0 = tmp_2_fu_759_p6;
    end else begin
        grp_fu_593_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        grp_fu_593_p1 = select_ln82_6_fu_1294_p3;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        grp_fu_593_p1 = select_ln82_4_fu_1123_p3;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_593_p1 = select_ln82_2_fu_971_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_593_p1 = select_ln82_fu_798_p3;
    end else begin
        grp_fu_593_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        lut_reorder_I_ce0 = 1'b1;
    end else begin
        lut_reorder_I_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        lut_reorder_J_ce0 = 1'b1;
    end else begin
        lut_reorder_J_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_32_fu_693_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state103;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln67_fu_743_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if (((icmp_ln67_1_fu_912_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            if (((icmp_ln67_2_fu_1068_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            if (((icmp_ln67_3_fu_1235_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state84))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state103 : begin
            if (((icmp_ln92_fu_1355_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state103))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state104;
            end
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Imag_Addr_A = Imag_Addr_A_orig << 32'd2;

assign Imag_Clk_A = ap_clk;

assign Imag_Rst_A = ap_rst_n_inv;

assign Real_r_Addr_A = Real_r_Addr_A_orig << 32'd2;

assign Real_r_Clk_A = ap_clk;

assign Real_r_Rst_A = ap_rst_n_inv;

assign add_ln43_fu_1316_p2 = (c_0_0_reg_496 + 11'd16);

assign add_ln67_1_fu_918_p2 = (c_aux_0_1_reg_520 + 3'd1);

assign add_ln67_2_fu_1074_p2 = (c_aux_0_2_reg_531 + 3'd1);

assign add_ln67_3_fu_1241_p2 = (c_aux_0_3_reg_543 + 3'd1);

assign add_ln67_fu_749_p2 = (c_aux_0_0_reg_508 + 3'd1);

assign add_ln85_1_fu_1311_p2 = (zext_ln49_5_reg_1791 + zext_ln75_1_fu_1247_p1);

assign add_ln85_fu_988_p2 = (zext_ln49_4_reg_1562 + zext_ln75_fu_924_p1);

assign add_ln_fu_874_p3 = {{tmp_18_fu_864_p4}, {c_aux_0_0_reg_508}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_19_fu_701_p1 = c_0_0_reg_496[9:0];

assign i_fu_1361_p2 = (i_0_reg_554 + 9'd1);

assign icmp_ln67_1_fu_912_p2 = ((c_aux_0_1_reg_520 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln67_2_fu_1068_p2 = ((c_aux_0_2_reg_531 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln67_3_fu_1235_p2 = ((c_aux_0_3_reg_543 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_743_p2 = ((c_aux_0_0_reg_508 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_1355_p2 = ((i_0_reg_554 == 9'd480) ? 1'b1 : 1'b0);

assign lut_reorder_I_address0 = zext_ln96_fu_1367_p1;

assign lut_reorder_J_address0 = zext_ln96_fu_1367_p1;

assign or_ln43_1_fu_993_p2 = (empty_19_reg_1387 | 10'd8);

assign or_ln43_2_fu_1149_p2 = (empty_19_reg_1387 | 10'd12);

assign or_ln43_fu_815_p2 = (empty_19_reg_1387 | 10'd4);

assign or_ln45_1_fu_820_p2 = (empty_19_reg_1387 | 10'd5);

assign or_ln45_2_fu_998_p2 = (empty_19_reg_1387 | 10'd9);

assign or_ln45_3_fu_1154_p2 = (empty_19_reg_1387 | 10'd13);

assign or_ln45_fu_705_p2 = (empty_19_fu_701_p1 | 10'd1);

assign or_ln46_1_fu_888_p2 = (empty_19_reg_1387 | 10'd6);

assign or_ln46_2_fu_1047_p2 = (empty_19_reg_1387 | 10'd10);

assign or_ln46_3_fu_1211_p2 = (empty_19_reg_1387 | 10'd14);

assign or_ln46_fu_722_p2 = (empty_19_reg_1387 | 10'd2);

assign or_ln47_1_fu_893_p2 = (empty_19_reg_1387 | 10'd7);

assign or_ln47_2_fu_1052_p2 = (empty_19_reg_1387 | 10'd11);

assign or_ln47_3_fu_1216_p2 = (empty_19_reg_1387 | 10'd15);

assign or_ln47_fu_727_p2 = (empty_19_reg_1387 | 10'd3);

assign select_ln76_1_fu_790_p3 = ((trunc_ln76_fu_777_p1[0:0] === 1'b1) ? reg_603 : reg_617);

assign select_ln76_2_fu_954_p3 = ((trunc_ln76_1_fu_950_p1[0:0] === 1'b1) ? reg_613 : reg_626);

assign select_ln76_3_fu_963_p3 = ((trunc_ln76_1_fu_950_p1[0:0] === 1'b1) ? reg_603 : reg_617);

assign select_ln76_4_fu_1106_p3 = ((trunc_ln76_2_fu_1102_p1[0:0] === 1'b1) ? reg_613 : reg_626);

assign select_ln76_5_fu_1115_p3 = ((trunc_ln76_2_fu_1102_p1[0:0] === 1'b1) ? reg_603 : reg_617);

assign select_ln76_6_fu_1277_p3 = ((trunc_ln76_3_fu_1273_p1[0:0] === 1'b1) ? reg_613 : reg_626);

assign select_ln76_7_fu_1286_p3 = ((trunc_ln76_3_fu_1273_p1[0:0] === 1'b1) ? reg_603 : reg_617);

assign select_ln76_fu_781_p3 = ((trunc_ln76_fu_777_p1[0:0] === 1'b1) ? reg_613 : reg_626);

assign select_ln82_1_fu_807_p3 = ((trunc_ln76_fu_777_p1[0:0] === 1'b1) ? reg_639 : reg_635);

assign select_ln82_2_fu_971_p3 = ((trunc_ln76_1_fu_950_p1[0:0] === 1'b1) ? reg_647 : reg_643);

assign select_ln82_3_fu_980_p3 = ((trunc_ln76_1_fu_950_p1[0:0] === 1'b1) ? reg_639 : reg_635);

assign select_ln82_4_fu_1123_p3 = ((trunc_ln76_2_fu_1102_p1[0:0] === 1'b1) ? reg_647 : reg_643);

assign select_ln82_5_fu_1132_p3 = ((trunc_ln76_2_fu_1102_p1[0:0] === 1'b1) ? reg_639 : reg_635);

assign select_ln82_6_fu_1294_p3 = ((trunc_ln76_3_fu_1273_p1[0:0] === 1'b1) ? reg_647 : reg_643);

assign select_ln82_7_fu_1303_p3 = ((trunc_ln76_3_fu_1273_p1[0:0] === 1'b1) ? reg_639 : reg_635);

assign select_ln82_fu_798_p3 = ((trunc_ln76_fu_777_p1[0:0] === 1'b1) ? reg_647 : reg_643);

assign tmp_18_fu_864_p4 = {{c_0_0_reg_496[10:3]}};

assign tmp_20_fu_932_p5 = c_aux_0_1_reg_520[1:0];

assign tmp_23_fu_1084_p5 = c_aux_0_2_reg_531[1:0];

assign tmp_28_fu_1198_p3 = {{tmp_27_reg_1721}, {c_aux_0_2_reg_531}};

assign tmp_29_fu_1255_p5 = c_aux_0_3_reg_543[1:0];

assign tmp_2_fu_759_p5 = c_aux_0_0_reg_508[1:0];

assign tmp_32_fu_693_p3 = c_0_0_reg_496[32'd10];

assign trunc_ln75_1_fu_928_p1 = c_aux_0_1_reg_520[1:0];

assign trunc_ln75_2_fu_1080_p1 = c_aux_0_2_reg_531[1:0];

assign trunc_ln75_3_fu_1251_p1 = c_aux_0_3_reg_543[1:0];

assign trunc_ln75_fu_755_p1 = c_aux_0_0_reg_508[1:0];

assign trunc_ln76_1_fu_950_p1 = c_aux_0_1_reg_520[0:0];

assign trunc_ln76_2_fu_1102_p1 = c_aux_0_2_reg_531[0:0];

assign trunc_ln76_3_fu_1273_p1 = c_aux_0_3_reg_543[0:0];

assign trunc_ln76_fu_777_p1 = c_aux_0_0_reg_508[0:0];

assign zext_ln101_fu_1379_p1 = indexJ_reg_1876;

assign zext_ln49_1_fu_825_p1 = or_ln43_fu_815_p2;

assign zext_ln49_2_fu_1003_p1 = or_ln43_1_fu_993_p2;

assign zext_ln49_3_fu_1159_p1 = or_ln43_2_fu_1149_p2;

assign zext_ln49_4_fu_909_p1 = or_ln43_reg_1497;

assign zext_ln49_5_fu_1232_p1 = or_ln43_2_reg_1726;

assign zext_ln49_fu_711_p1 = c_0_0_reg_496;

assign zext_ln50_1_fu_898_p1 = or_ln46_1_fu_888_p2;

assign zext_ln50_2_fu_1057_p1 = or_ln46_2_fu_1047_p2;

assign zext_ln50_3_fu_1221_p1 = or_ln46_3_fu_1211_p2;

assign zext_ln50_fu_732_p1 = or_ln46_fu_722_p2;

assign zext_ln51_1_fu_830_p1 = or_ln45_1_fu_820_p2;

assign zext_ln51_2_fu_1008_p1 = or_ln45_2_fu_998_p2;

assign zext_ln51_3_fu_1164_p1 = or_ln45_3_fu_1154_p2;

assign zext_ln51_fu_716_p1 = or_ln45_fu_705_p2;

assign zext_ln53_1_fu_903_p1 = or_ln47_1_fu_893_p2;

assign zext_ln53_2_fu_1062_p1 = or_ln47_2_fu_1052_p2;

assign zext_ln53_3_fu_1226_p1 = or_ln47_3_fu_1216_p2;

assign zext_ln53_fu_737_p1 = or_ln47_fu_727_p2;

assign zext_ln75_1_fu_1247_p1 = c_aux_0_3_reg_543;

assign zext_ln75_fu_924_p1 = c_aux_0_1_reg_520;

assign zext_ln85_1_fu_1042_p1 = add_ln85_reg_1609;

assign zext_ln85_2_fu_1205_p1 = tmp_28_fu_1198_p3;

assign zext_ln85_3_fu_1350_p1 = add_ln85_1_reg_1838;

assign zext_ln85_fu_882_p1 = add_ln_fu_874_p3;

assign zext_ln96_fu_1367_p1 = i_0_reg_554;

assign zext_ln99_fu_1373_p1 = lut_reorder_I_q0;

always @ (posedge ap_clk) begin
    zext_ln49_reg_1405[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    Real_addr_2_reg_1415[0] <= 1'b1;
    Imag_addr_reg_1420[0] <= 1'b1;
    zext_ln50_reg_1425[1] <= 1'b1;
    zext_ln50_reg_1425[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    Real_addr_3_reg_1435[1:0] <= 2'b11;
    Imag_addr_1_reg_1440[1:0] <= 2'b11;
    or_ln43_reg_1497[2] <= 1'b1;
    zext_ln49_1_reg_1502[2] <= 1'b1;
    zext_ln49_1_reg_1502[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    Real_addr_8_reg_1512[0] <= 1'b1;
    Real_addr_8_reg_1512[2] <= 1'b1;
    Imag_addr_6_reg_1517[0] <= 1'b1;
    Imag_addr_6_reg_1517[2] <= 1'b1;
    zext_ln50_1_reg_1532[2:1] <= 2'b11;
    zext_ln50_1_reg_1532[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    Real_addr_9_reg_1542[2:0] <= 3'b111;
    Imag_addr_7_reg_1547[2:0] <= 3'b111;
    zext_ln49_4_reg_1562[2] <= 1'b1;
    zext_ln49_4_reg_1562[10] <= 1'b0;
    or_ln43_1_reg_1614[3] <= 1'b1;
    zext_ln49_2_reg_1619[3] <= 1'b1;
    zext_ln49_2_reg_1619[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    Real_addr_13_reg_1629[0] <= 1'b1;
    Real_addr_13_reg_1629[3] <= 1'b1;
    Imag_addr_11_reg_1634[0] <= 1'b1;
    Imag_addr_11_reg_1634[3] <= 1'b1;
    zext_ln50_2_reg_1649[1] <= 1'b1;
    zext_ln50_2_reg_1649[3:3] <= 1'b1;
    zext_ln50_2_reg_1649[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    Real_addr_14_reg_1659[1:0] <= 2'b11;
    Real_addr_14_reg_1659[3] <= 1'b1;
    Imag_addr_12_reg_1664[1:0] <= 2'b11;
    Imag_addr_12_reg_1664[3] <= 1'b1;
    or_ln43_2_reg_1726[3:2] <= 2'b11;
    zext_ln49_3_reg_1731[3:2] <= 2'b11;
    zext_ln49_3_reg_1731[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    Real_addr_18_reg_1741[0] <= 1'b1;
    Real_addr_18_reg_1741[3:2] <= 2'b11;
    Imag_addr_16_reg_1746[0] <= 1'b1;
    Imag_addr_16_reg_1746[3:2] <= 2'b11;
    zext_ln50_3_reg_1761[3:1] <= 3'b111;
    zext_ln50_3_reg_1761[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    Real_addr_19_reg_1771[3:0] <= 4'b1111;
    Imag_addr_17_reg_1776[3:0] <= 4'b1111;
    zext_ln49_5_reg_1791[3:2] <= 2'b11;
    zext_ln49_5_reg_1791[10] <= 1'b0;
end

endmodule //Reorder_fft
